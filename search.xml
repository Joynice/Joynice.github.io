<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Sqlalchemy模型对象序列化</title>
    <url>/2020/01/07/Sqlalchemy%E6%9F%A5%E8%AF%A2%E5%AF%B9%E8%B1%A1%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<p>最近看了<code>Python Flask高级编程之RESTFul API前后端分离精讲</code>的课程受益匪浅，在一起的知识层面上进一步构建更加完美的项目结构，这里主要记录Sqlalchemy模型对象序列化问题。</p>
<a id="more"></a>
<h3 id="0x01-以前方法"><a href="#0x01-以前方法" class="headerlink" title="0x01 以前方法"></a>0x01 以前方法</h3><p>以前处理模型对象序列化的问题的时候，都是手动将模型对象构造成需要返回数据的字典，非常的繁琐，写在视图函数中显得代码结构非常的臃肿，举个栗子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user_list = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">users = User.query.all()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> users:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    user = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    user[<span class="string">'id'</span>] = _.id</span></pre></td></tr><tr><td class="code"><pre><span class="line">    user[<span class="string">'name'</span>] = _.name</span></pre></td></tr><tr><td class="code"><pre><span class="line">    user_list.append(user)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> jsonify(user_list)</span></pre></td></tr></table></figure>
<p>这种方法是最好实现的，但是写在视图函数中非常的臃肿，早想改掉这种写法，知道看到这个课程，发现了更加方便的写法。</p>
<h3 id="0x02-现在方法（更好）"><a href="#0x02-现在方法（更好）" class="headerlink" title="0x02 现在方法（更好）"></a>0x02 现在方法（更好）</h3><p>现在的写法是对整个项目结构的改善，主要讲序列化的代码写在了Model中，同时对<code>JSONEncoder</code>类中的<code>default</code>方法进行重写，使得能够解析模型对象</p>
<blockquote>
<p><code>serialize.py</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask.json <span class="keyword">import</span> JSONEncoder <span class="keyword">as</span> _JSONEncoder</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app.libs.error_code <span class="keyword">import</span> ServerError</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONEncoder</span><span class="params">(_JSONEncoder)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, o)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> hasattr(o, <span class="string">'keys'</span>) <span class="keyword">and</span> hasattr(o, <span class="string">'__getitem__'</span>): <span class="comment">#判断模型对象是否有keys 和 __getitem__属性,如果有使用dict()返回模型对象类属性和实例对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> dict(o)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> isinstance(o, date): <span class="comment">#对date类型进行格式化</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> o.strftime(<span class="string">'%Y-%m-%d'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">raise</span> ServerError()</span></pre></td></tr></table></figure>
<p>如果仅仅这样写的话，通过调试发现，重写的<code>default</code>函数运行，还是运行原来的函数，所以需要指定Flask中的<code>json_encoder</code>对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask <span class="keyword">as</span> _Flask</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flask</span><span class="params">(_Flask)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    json_encoder = JSONEncoder</span></pre></td></tr></table></figure>
<blockquote>
<p><code>dbs.py</code></p>
</blockquote>
<p>继承db.Model类，所有的模型对象继承Base类，主要实现以下几个功能:</p>
<ul>
<li>模型对象增加<code>create_time</code>、<code>status</code>字段</li>
<li>删除数据时，实现软删除</li>
<li>设置<code>keys</code>方法，自动执行获取，模型对象中的<code>self.fields</code>的值</li>
<li>对<code>self.fields</code>进行增加删除，方便自定义返回数据</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(db.Model)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __abstract__ = <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    create_time = Column(DateTime, default=datetime.now(), comment=<span class="string">'创建时间'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    status = Column(SmallInteger, default=<span class="number">1</span>, comment=<span class="string">'用于软删除'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> getattr(self, item)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_attrs</span><span class="params">(self, attrs_dict)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> attrs_dict.items():</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> hasattr(self, key) <span class="keyword">and</span> key != <span class="string">'id'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                setattr(self, key, value)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.status = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keys</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> self.fields</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hide</span><span class="params">(self, *keys)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            self.fields.remove(key)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> self</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, *keys)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            self.fields.append(key)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> self</span></pre></td></tr></table></figure>

<blockquote>
<p><code>models.py</code></p>
</blockquote>
<p>在构造函数中设置<code>self.fields</code>实现返回默认字段数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(Base)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    用户：用户id、用户名、分数、授权登录时间（第一次使用本平台）、上次登录时间、本地登录时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    第一次在前端使用本平台，会检查下sso中的id是否存在此表，若不存在则新增，代表用户授权使用本项目</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'t_user'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = db.Column(db.String(<span class="number">50</span>), primary_key=<span class="literal">True</span>, default=shortuuid.uuid)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    username = db.Column(db.String(<span class="number">20</span>), comment=<span class="string">'用户名'</span>, unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    email = db.Column(db.String(<span class="number">255</span>), comment=<span class="string">'邮箱'</span>, unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    _password = db.Column(<span class="string">'password'</span>, db.String(<span class="number">100</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    score = db.Column(db.Integer, default=<span class="number">100</span>, comment=<span class="string">'用户积分'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    join_time = db.Column(db.DateTime, default=datetime.datetime.now, comment=<span class="string">'加入时间'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    before_last_login_time = db.Column(db.DateTime, default=datetime.datetime.now, comment=<span class="string">'上次登录时间'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    last_login_time = db.Column(db.DateTime, default=datetime.datetime.now, comment=<span class="string">'本次登录时间'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    auth = db.Column(db.SmallInteger, default=<span class="number">1</span>, comment=<span class="string">'用于权限认证,1:普通用户;2:管理员;3:超级管理员'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @orm.reconstructor  #增加这个装饰器，使得运行构造函数，如果不加,则不会运行。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.fields = [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'score'</span>, <span class="string">'json_time'</span>, <span class="string">'before_last_login_time'</span>, <span class="string">'last_login_time'</span>, <span class="string">'auth'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 或者重写keys方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keys</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> [<span class="string">'id'</span>, <span class="string">'name'</span>, <span class="string">'score'</span>, <span class="string">'json_time'</span>, <span class="string">'before_last_login_time'</span>, <span class="string">'last_login_time'</span>, <span class="string">'auth'</span>]</span></pre></td></tr></table></figure>

<blockquote>
<p><code>view.py</code></p>
</blockquote>
<p>视图函数中只需要传入模型对象就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@api.route('', methods=['GET'])</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_user</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    uid = g.user.id</span></pre></td></tr><tr><td class="code"><pre><span class="line">    user = User.query.filter_by(id=uid).first_or_404()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> jsonify(user)</span></pre></td></tr></table></figure>

<h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>虽然现在的方法，看起来比较复杂，但是调用起来非常的方便，可以忍受封装的复杂，不可以忍受调用的复杂，奥利给！！！</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Flask-Sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask红图使用</title>
    <url>/2020/01/07/Flask%E7%BA%A2%E5%9B%BE%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在Flask中，自带有蓝图功能，但是在大型项目中，只使用蓝图会使得项目比较臃肿，所有在蓝图的基础上引入红图的概念，细化蓝图功能，使得项目更加轻巧。</p>
<a id="more"></a>

<h3 id="0x01-红图概念"><a href="#0x01-红图概念" class="headerlink" title="0x01 红图概念"></a>0x01 红图概念</h3><p>红图主要针对于具体的业务模块，在蓝图之下，一般在设计REST API的时候将版本号作为整体的蓝图，将各个业务模块作为红图，增加项目的颗粒度。</p>
<p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/1259476-20181019232609737-16604921.png" alt=""></p>
<h3 id="0x02-红图实现"><a href="#0x02-红图实现" class="headerlink" title="0x02 红图实现"></a>0x02 红图实现</h3><p>红图的实现，可以参照蓝图的实现，主要核心的功能，设置视图装饰器，以及注册到蓝图上的功能。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redprint</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.name = name</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.mound = []</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(self, rule, **options)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(f)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            self.mound.append((f, rule, options))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> f</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> decorator</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self, bp, url_prefix=None)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> url_prefix <span class="keyword">is</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            url_prefix = <span class="string">'/'</span> + self.name</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> f, rule, options <span class="keyword">in</span> self.mound:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            endpoint = self.name + <span class="string">'+'</span> + \</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       options.pop(<span class="string">"endpoint"</span>, f.__name__)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            bp.add_url_rule(url_prefix + rule, endpoint, f, **options)  <span class="comment">#注册到蓝图（路由,endpoint）</span></span></pre></td></tr></table></figure>
<h3 id="0x03-红图使用"><a href="#0x03-红图使用" class="headerlink" title="0x03 红图使用"></a>0x03 红图使用</h3><p>主要使用也是实现的两个主要功能，注册到蓝图上和视图装饰器。<br><strong>视图装饰器</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Redprint</span></pre></td></tr><tr><td class="code"><pre><span class="line">api = Redprint(<span class="string">'book'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@api.route('/search')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">pass</span></span></pre></td></tr></table></figure>
<p><strong>注册到蓝图上</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_blueprint_v1</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    bp_v1 = Blueprint(<span class="string">'v1'</span>, __name__)  <span class="comment">#蓝图</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    user.api.register(bp_v1)  <span class="comment">#红图注册</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    book.api.register(bp_v1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    client.api.register(bp_v1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    token.api.register(bp_v1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gift.api.register(bp_v1)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> bp_v1</span></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium加载插件实现动态代理</title>
    <url>/2020/01/03/Selenium%E5%8A%A0%E8%BD%BD%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>在爬虫实现的过程中，有些时候需要借助操控浏览器实现数据的抓取，在Python中操作浏览器使用最多的库就是<code>Selenium</code>这个库封装了操作主流浏览器的功能，本片文章主要记录如何给Chrome浏览器设置动态代理。</p>
<a id="more"></a>

<h3 id="0x01-设置无用户名密码代理"><a href="#0x01-设置无用户名密码代理" class="headerlink" title="0x01 设置无用户名密码代理"></a>0x01 设置无用户名密码代理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Selenium <span class="keyword">import</span> webdriver</span></pre></td></tr><tr><td class="code"><pre><span class="line">chromeOptions = webdriver.ChromeOptions()</span></pre></td></tr><tr><td class="code"><pre><span class="line">chromeOptions.add_argument(<span class="string">'--proxy-server=http://ip:port'</span>)  </span></pre></td></tr><tr><td class="code"><pre><span class="line">driver = webdriver.Chrome(chrome_options=chromeOptions)</span></pre></td></tr></table></figure>
<p>这种方式<code>add_argument</code>方法将代理添加到浏览器配置中，这种方法也是最常使用的一种设置代理的方式</p>
<h3 id="0x02-设置有用户名密码的代理"><a href="#0x02-设置有用户名密码的代理" class="headerlink" title="0x02 设置有用户名密码的代理"></a>0x02 设置有用户名密码的代理</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriverdef create_proxyauth_extension(proxy_host, proxy_port,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                               proxy_username, proxy_password,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                               scheme=<span class="string">'http'</span>, plugin_path=<span class="literal">None</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""Proxy Auth Extension</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    args:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        proxy_host (str): domain or ip address, ie proxy.domain.com</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        proxy_port (int): port</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        proxy_username (str): auth username</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        proxy_password (str): auth password</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    kwargs:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        scheme (str): proxy scheme, default http</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        plugin_path (str): absolute path of the extension       </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    return str -&gt; plugin_path</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">import</span> string</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">import</span> zipfile</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> plugin_path <span class="keyword">is</span> <span class="literal">None</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        plugin_path = <span class="string">'d:/webdriver/vimm_chrome_proxyauth_plugin.zip'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    manifest_json = <span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        "version": "1.0.0",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        "manifest_version": 2,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        "name": "Chrome Proxy",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        "permissions": [</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            "proxy",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            "tabs",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            "unlimitedStorage",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            "storage",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            "&lt;all_urls&gt;",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            "webRequest",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            "webRequestBlocking"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        ],</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        "background": &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            "scripts": ["background.js"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        "minimum_chrome_version":"22.0.0"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    background_js = string.Template(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">"""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    var config = &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            mode: "fixed_servers",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            rules: &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">              singleProxy: &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                scheme: "$&#123;scheme&#125;",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                host: "$&#123;host&#125;",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                port: parseInt($&#123;port&#125;)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">              &#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">              bypassList: ["foobar.com"]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">          &#125;;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    chrome.proxy.settings.set(&#123;value: config, scope: "regular"&#125;, function() &#123;&#125;);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    function callbackFn(details) &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        return &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            authCredentials: &#123;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                username: "$&#123;username&#125;",</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                password: "$&#123;password&#125;"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">            &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        &#125;;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    &#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string"></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    chrome.webRequest.onAuthRequired.addListener(</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                callbackFn,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                &#123;urls: ["&lt;all_urls&gt;"]&#125;,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">                ['blocking']</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    );</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    """</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ).substitute(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        host=proxy_host,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        port=proxy_port,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        username=proxy_username,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        password=proxy_password,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        scheme=scheme,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(plugin_path, <span class="string">'w'</span>) <span class="keyword">as</span> zp:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        zp.writestr(<span class="string">"manifest.json"</span>, manifest_json)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        zp.writestr(<span class="string">"background.js"</span>, background_js)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> plugin_path</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">proxyauth_plugin_path = create_proxyauth_extension(</span></pre></td></tr><tr><td class="code"><pre><span class="line">    proxy_host=<span class="string">"proxy.crawlera.com"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    proxy_port=<span class="number">8010</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    proxy_username=<span class="string">"fea687a8b2d448d5a5925ef1dca2ebe9"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    proxy_password=<span class="string">""</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">co = webdriver.ChromeOptions()</span></pre></td></tr><tr><td class="code"><pre><span class="line">co.add_argument(<span class="string">"--start-maximized"</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">co.add_extension(proxyauth_plugin_path)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">driver = webdriver.Chrome(chrome_options=co)</span></pre></td></tr><tr><td class="code"><pre><span class="line">driver.get(<span class="string">"http://www.amazon.com/"</span>)</span></pre></td></tr></table></figure>
<p>以上代码就会生成，一个插件安装在Chrome中，通过传入代理地址、端口、用户名、密码以及协议获取动态的代理，进行访问目标网站。</p>
<p>插件源代码 <a href="https://github.com/RobinDev/Selenium-Chrome-HTTP-Private-Proxy" target="_blank" rel="noopener">https://github.com/RobinDev/Selenium-Chrome-HTTP-Private-Proxy</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Selenium</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年终总结</title>
    <url>/2020/01/01/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>时间过得真快，毕业也快半年了，现在是2020年的第一个小时，总结下2019年的收获。</p>
<a id="more"></a>
<h3 id="0x01-毕业设计"><a href="#0x01-毕业设计" class="headerlink" title="0x01 毕业设计"></a>0x01 毕业设计</h3><p>这一年的上半年主要忙于毕业设计，毕业设计的题目是<code>主动式系统指纹识别系统设计与实现</code>，虽然说上半年主要忙于毕业设计，但是集中完成也就两个月时间左右。在整个过程中还算比较顺利，从开题、中期、到最终答辩也没遇到什么太大的困难，也非常开心能给大学四年生活画上完美的句号。</p>
<h3 id="0x02-护网"><a href="#0x02-护网" class="headerlink" title="0x02 护网"></a>0x02 护网</h3><p>唯一说遗憾的是，没有参加毕业典礼，因为最终答辩完就参加了<code>2019护网</code>，也是人生第一次去了北京，看了天安门广场<br>、故宫等等以前在梦中出现的景点，也开阔了自己的视野，见识到大城市、大公司的给人带来的优越感，同时也感慨生活节奏之快，也知道北京这座城市并不适合我，短短20天的护网结束后，回了趟家，最后决定还是返回郑州进行创业。</p>
<h3 id="0x03-第一个iphone"><a href="#0x03-第一个iphone" class="headerlink" title="0x03 第一个iphone"></a>0x03 第一个iphone</h3><p>也就在护网期间，买了人生的第一个iphone，刚开始还是非常的开心，半年下来，发现手机这是个工具，可能iphone是个好的工具，但是我仅仅使用到它的一点的功能，反正没啥说的，华而不实。。。</p>
<h3 id="0x03-洞见网安"><a href="#0x03-洞见网安" class="headerlink" title="0x03 洞见网安"></a>0x03 洞见网安</h3><p>毕业之后，我的大多数同学都去找工作了，我和<code>卜俊杰</code>选择留下来创业，可能过程是艰难的，当时希望结果是好的。在这半年的工作中，开发了<code>观星资产</code>、<code>微信聚合平台</code>、<code>单点登录系统</code>，以及最近开发的<code>洞见网安学院</code>还有参与维护了<code>ECommerceCrawlers</code>成为码云GVP，学习到了很多，也总结了很多。</p>
<h3 id="0x04-微信集合平台"><a href="#0x04-微信集合平台" class="headerlink" title="0x04 微信集合平台"></a>0x04 微信集合平台</h3><p>开发这个平台，源于安全公众号的收集，原来只是收集个安全公众号，在github上就300多star，要是把公众号下的文章聚合下来岂不是更好，抱着这个念头，和<code>卜俊杰</code>奋战了一个星期，基本上天天熬夜，完成了第一版，上线运行。在之后的也得到大家的认可，基本上每天都有上百的访问量，非常的开心。</p>
<h3 id="0x05-简书"><a href="#0x05-简书" class="headerlink" title="0x05 简书"></a>0x05 简书</h3><p>重拾简书，在简书上写文章，主要包括写小说、散文、诗歌，也获得了不少的喜欢</p>
<h3 id="0x06-搭建技术博客"><a href="#0x06-搭建技术博客" class="headerlink" title="0x06 搭建技术博客"></a>0x06 搭建技术博客</h3><p>这里还得谢谢<code>卜俊杰</code>帮我搭建了博客，其实之前博客也有，大二的时候就搭建好过，写了几篇文章后就舍弃了，现在重新拾起来，感觉还是不错的。</p>
<h3 id="0x07-发祝福"><a href="#0x07-发祝福" class="headerlink" title="0x07 发祝福"></a>0x07 发祝福</h3><p>在新年的第一个小时，我也是第一次给我爸妈发送新年祝福，祝福如下：</p>
<ul>
<li>TO妈妈：新年快乐，祝妈妈新的一年，越来越漂亮，越来越年轻，祝淘宝店铺生意兴隆，祝你开开心心每一天，快快乐乐，笑口常开。一切美好的事物都与你相伴，最后发句我写的小诗“冬夏恒久，愿你一世温良；春秋难遇，愿你温情永伴”，妈妈新年快乐！！！</li>
<li>TO爸爸：新年快乐，祝爸爸新的一年，越来越帅气，越来越年轻，祝工作上一切顺利，祝你开开心心每一天，快快乐乐，笑口常开。一切美好的事物都与你相伴，最后发句我写的小诗“冬夏恒久，愿你一世温良；春秋难遇，愿你温情永伴”，爸爸新年快乐！！！</li>
</ul>
<p>也不知道明早他们看到会是什么心情。。。</p>
<h3 id="0x08-脑子不好使了"><a href="#0x08-脑子不好使了" class="headerlink" title="0x08 脑子不好使了"></a>0x08 脑子不好使了</h3><p>记不住太多了，也就这吧，给大脑休息下，睡觉，晚安，2020</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>pip设置豆瓣镜像源</title>
    <url>/2019/12/31/Windows%E4%B8%8Bpip%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E8%B1%86%E7%93%A3%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    <content><![CDATA[<p>在安装第三方包的时候，默认源当包比较大的时候，安装比较慢，很是耽搁时间，所以需要选择国内的源，主要记录如何使用设置豆瓣镜像源。</p>
<a id="more"></a>
<h3 id="0x01-命令行模式"><a href="#0x01-命令行模式" class="headerlink" title="0x01 命令行模式"></a>0x01 命令行模式</h3><p>直接运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install xxx -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span></pre></td></tr></table></figure>

<h3 id="0x02-修改默认设置"><a href="#0x02-修改默认设置" class="headerlink" title="0x02 修改默认设置"></a>0x02 修改默认设置</h3><ol>
<li>在<code>C:\Users\Administrator\AppData\Roaming</code>目录下新建文件夹 <code>pip</code></li>
<li>在pip文件夹下新建pip.ini文件，然后在pip.ini 里输入 <figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">timeout</span> = <span class="number">6000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">index-url</span> =https://pypi.douban.com/simple</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">trusted-host</span> = pypi.douban.com</span></pre></td></tr></table></figure></li>
<li>设置完成后，正常使用pip</li>
</ol>
<h3 id="0x03-pip其他参数"><a href="#0x03-pip其他参数" class="headerlink" title="0x03 pip其他参数"></a>0x03 pip其他参数</h3><ul>
<li>pip -V <strong>pip版本信息</strong></li>
<li>pip list <strong>显示pip已安装包</strong></li>
<li>pip show xxx <strong>显示某个包的具体信息</strong></li>
<li>pip freeze &gt; requirements.txt <strong>生成requirements.txt依赖文件</strong></li>
<li>pip install -r requirements.txt <strong>安装requirements.txt文件</strong></li>
<li>pip install -U xxx <strong>升级某个包</strong></li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pip</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装Mysql</title>
    <url>/2019/12/30/Docker%E5%AE%89%E8%A3%85Mysql/</url>
    <content><![CDATA[<p>前一段时间发现了尴尬的问题，别人问自己的Mysql版本，出口说个十点几的版本，回去查查才发现Mysql的官方Docker镜像为8.0.18，本片主要记录Docker安装Mysql5.7的版本。</p>
<a id="more"></a>

<h3 id="0x01-缘由"><a href="#0x01-缘由" class="headerlink" title="0x01 缘由"></a>0x01 缘由</h3><p>由于项目开发中，要使用Json字段作为表的拓展字段，为Json字段支持Mysql5.7以后的版本，所以记录下，如何使用Docker安装Mysql5.7</p>
<h3 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h3><p><strong>搜索Mysql</strong></p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker search mysql</span></span></pre></td></tr></table></figure>
<p><strong>拉取Mysql5.7版本</strong></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">docker pull mysql:<span class="number">5.7</span></span></pre></td></tr></table></figure>
<p>如果拉取的慢，可以设置为国内的源<br><strong>运行Mysql</strong></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name doonsec-mysql -p 3306:3306 -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=root -e <span class="attribute">MYSQL_DATABASE</span>=docker  -e <span class="attribute">TZ</span>=Asia/Shanghai -d mysql:5.7 <span class="attribute">--character-set-server</span>=utf8mb4 <span class="attribute">--collation-server</span>=utf8mb4_unicode_ci <span class="attribute">--default-time_zone</span>=<span class="string">'+8:00'</span></span></pre></td></tr></table></figure>
<p>其中参数:</p>
<ul>
<li>–name: 容器名称</li>
<li>-p: 映射端口</li>
<li>-e MYSQL_ROOT_PASSWORD=xxx: root用户密码</li>
<li>-e MYSQL_DATABASE=xxx: 创建数据库</li>
<li>-e TZ=Asia/Shanghai: 设置时区</li>
<li>–character-set-server=utf8mb4: 设置编码</li>
<li>–collation-server=utf8mb4_unicode_ci: 设置字符集</li>
<li>–default-time_zone=’+8:00’: 时区加+8</li>
</ul>
<p>设置完之后，即可使用root用户进行连接</p>
<h3 id="0x03-使用"><a href="#0x03-使用" class="headerlink" title="0x03 使用"></a>0x03 使用</h3><p>安装好后，可以创建普通用户设置权限，进行使用。</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask封装响应包</title>
    <url>/2019/12/30/Flask%E5%B0%81%E8%A3%85%E5%93%8D%E5%BA%94%E5%8C%85/</url>
    <content><![CDATA[<p>主要记录Flask封装响应包，包括返回json内容、状态码、Header、Cookie信息。</p>
<a id="more"></a>
<p>通过Flask的Response封装响应包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'Joynice'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Response</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum, unique</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@unique</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResponseCodeEnum</span><span class="params">(Enum)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    GET_SUCCESS = <span class="string">'200'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    POST_SUCCESS = <span class="string">'201'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    BAD_REQUEST = <span class="string">'400'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    UNAUTHORIZED = <span class="string">'401'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    FORBIDDEND = <span class="string">'403'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    NOT_FOUND = <span class="string">'404'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    METHOD_NOT_ALLOWED = <span class="string">'405'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @classmethod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">code</span><span class="params">(cls)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> [cls.GET_SUCCESS.value, cls.POST_SUCCESS.value, cls.BAD_REQUEST.value, cls.UNAUTHORIZED.value,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                cls.FORBIDDEND.value, cls.NOT_FOUND.value, cls.METHOD_NOT_ALLOWED.value]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyResponse</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set_cookie</span><span class="params">(self, resp, cookie)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> isinstance(cookie, dict):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> cookie:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                resp.set_cookie(key, value)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> resp</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'cookie must dict'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__set_header</span><span class="params">(self, resp, header)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> isinstance(header, dict):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> key, value <span class="keyword">in</span> header:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                resp.headers[key] = value</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> resp</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'header must dict'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restful_result</span><span class="params">(self, message, data, success)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"message"</span>: message, <span class="string">"data"</span>: data <span class="keyword">or</span> &#123;&#125;, <span class="string">"success"</span>: success <span class="keyword">or</span> <span class="string">''</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_response</span><span class="params">(self, status, data=None, message=None, success=None, cookie=None, header=None)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        封装相应包, 相应类型json</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param status: 状态码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param data:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param message:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param success:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param cookie:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param header:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :return:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        resp = Response(json.dumps(self.restful_result(message=message, data=data, success=success)),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        content_type=<span class="string">'application/json'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> status <span class="keyword">not</span> <span class="keyword">in</span> ResponseCodeEnum.code():</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'状态码不可用'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        resp.status = status</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> cookie:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            resp = self.__set_cookie(resp, cookie)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> header:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            resp = self.__set_header(resp, header)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> resp</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">myresponse = MyResponse()</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众号信息采集思路与实践</title>
    <url>/2019/12/27/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86%E6%80%9D%E8%B7%AF%E4%B8%8E%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>微信公众号信息采集思路与实践</p>
<a id="more"></a>
<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><ul>
<li><p>早在两年前就进行了微信公众号基本信息采集</p>
</li>
<li><p><a href="https://github.com/DropsOfZut/awesome-security-weixin-official-accounts/commits/master" target="_blank" rel="noopener">https://github.com/DropsOfZut/awesome-security-weixin-official-accounts/commits/master</a></p>
</li>
<li><p>通过一篇公众号文章获取爬取公众号基本信息</p>
</li>
<li><p>存在问题：更新麻烦、文章存在失效、信息处理麻烦</p>
</li>
<li><p>想要的功能：方便git仓库同步，方面增加删除公众号</p>
</li>
</ul>
<p>另外</p>
<ul>
<li><p>微信公众号相对封闭不易爬取</p>
</li>
<li><p>关于安全方面的文章微信公众号也是一个重要来源</p>
</li>
<li><p>舆情监测分析、公众号数据分析</p>
</li>
</ul>
<p><strong>爬取一个公众号的来源从哪里？</strong></p>
<p>普通数据的爬取方式，给一个网站，从头爬取链接，链接爬详情。</p>
<p>微信官方是没有这样的一个网站</p>
<p>只有寻找蹊径</p>
<h2 id="爬取方式"><a href="#爬取方式" class="headerlink" title="爬取方式"></a>爬取方式</h2><ul>
<li>方案一：基于搜狗入口</li>
</ul>
<ul>
<li>方案二：网页微信端</li>
</ul>
<ul>
<li>方案三：<strong>对微信进行中间人攻击</strong></li>
</ul>
<ul>
<li>方案四：Hook微信</li>
</ul>
<h3 id="0x01基于搜狗入口"><a href="#0x01基于搜狗入口" class="headerlink" title="0x01基于搜狗入口"></a>0x01基于搜狗入口</h3><p>一般流程：</p>
<p>1、搜狗微信搜索入口进行公众号搜索</p>
<p>2、选取公众号进入公众号历史文章列表 </p>
<p>3、对文章内容进行解析入库</p>
<p>采集过于频繁的话，搜狗搜索和公众号历史文章列表访问都会出现验证码。直接采用一般的脚本采集是无法拿到验证码的。这里可以使用无头浏览器来进行访问,通过对接打码平台识别验证码。无头浏览器可采用selenium。</p>
<p>即便采用无头浏览器同样存在问题：</p>
<p>1、效率低下（实际上就是在跑一个完整的浏览器来模拟人类操作）</p>
<p>2、网页资源浏览器加载难以控制，脚本对浏览器加载很难控制 3、验证码识别也无法做到100%，中途很可能会打断抓取流程</p>
<p>如果坚持使用搜狗入口并想进行完美采集的话只有增加代理IP。顺便说一句，公开免费的IP地址就别想了，非常不稳定，而且基本都被微信给封了。</p>
<p>除了面临搜狗/微信的反爬虫机制之外，采用此方案还有其他的缺点：</p>
<p>无法获得阅读数、点赞数等用于评估文章质量的关键信息</p>
<p>无法及时获得已经发布公众号文章，只能作定期的重复爬取 只能获得最近十条群发文章</p>
<p>github免费轮子：</p>
<ul>
<li><a href="https://github.com/chyroc/WechatSogou" target="_blank" rel="noopener">https://github.com/chyroc/WechatSogou</a></li>
<li><a href="https://github.com/jaryee/wechat_sogou_crawl" target="_blank" rel="noopener">https://github.com/jaryee/wechat_sogou_crawl</a></li>
</ul>
<h3 id="0x02网页微信端"><a href="#0x02网页微信端" class="headerlink" title="0x02网页微信端"></a>0x02网页微信端</h3><p>微信聊天不仅有手机端、电脑端还有web端<code>https://wx.qq.com/</code></p>
<p>扫码登录微信、此时数据传输走的就是https。</p>
<p>通过抓取数据包、模拟分析。能完成微信上大部分操作。<br>群发消息、获取消息、删除好友、获取公众号信息</p>
<p>被动爬取与主动爬取</p>
<p>不要重复做轮子：<code>pychat</code>与<code>itchat</code></p>
<p>基本请求功能都有封装，它实现的原理就是对网页微信进行抓包分析，汇总成个人微信接口，目标就是所有网页微信能实现的功能它都能实现</p>
<p>这种方案的主要流程是：</p>
<p>1、服务器端通过ItChat登录网页微信</p>
<p>2、当公众号发布新文章推送的时候，会被服务端截获进行后续的解析入库</p>
<p>这种方案的优点是：</p>
<p>1、基本零间隔获取已经发布的公众号文章</p>
<p>2、能获取点赞数、阅读数 </p>
<p>3、只需手机微信保持登陆，不用其他操作</p>
<p>网页版微信存在问题：</p>
<p>1、新注册的小号已经不能登入</p>
<p>2、对老号也有部分限制</p>
<p>3、itchat已经不支持微信公众号的获取了</p>
<p>4、必须有手机在线、不能主动退出或长时间断网掉线</p>
<h3 id="0x03-对微信进行中间人攻击"><a href="#0x03-对微信进行中间人攻击" class="headerlink" title="0x03 对微信进行中间人攻击"></a>0x03 <strong>对微信进行中间人攻击</strong></h3><p>中间人攻击本是某种黑客手法，用于截取客户端与服务端之间的通信信息。这种方案的思路是在手机微信和微信服务器之间搭建一个”HTTPS代理”，用于截获手机微信获取的公众号文章信息。</p>
<p>一般性步骤是：</p>
<p>1、手机微信搜索一个公众号</p>
<p>2、点击进入公众号历史文章页面 </p>
<p>3、代理识别已经进入列表页，进行内容截获，同时根据实际情况返回继续下拉或爬取新的公众号的js代码</p>
<p>这种方案能够实现自动化的原因是：</p>
<p>1、微信公众号使用的是HTTPS协议，且内容未加密</p>
<p>2、微信公众号文章列表和详情本质上是个Web页面，可以嵌入js代码进行控制 </p>
<p>这种方案的优点：</p>
<p>1、一般情况下不会被屏蔽</p>
<p>2、能拿到点赞数和阅读数等文章评估信息 3、能拿到公众号全部的历史文章</p>
<p>当然，也存在很多缺点：</p>
<p>1、需要一个长期联网的实体手机</p>
<p>2、前期需要设置代理，工作量比较大 </p>
<p>3、本质上还是个轮查的过程，而不是实时推送 </p>
<p>4、同样有Web加载难以控制的风险，且本地网络环境对其影响非常大 </p>
<p>5、存在着微信接口发生变更代码不再适应的情况</p>
<p><strong>利用Mimtproxy实现过程</strong></p>
<p>常用的代理抓包工具；Wireshark、BP、Mimtproxy、Anyproxy、Fidder</p>
<p>使用Mimtproxy正向中间人代理，部署在与设备同一局域网下进行拦截数据，数据请求先流向代理、代理发送到服务器、得到响应、返回给设备</p>
<p><img src="https://raw.githubusercontent.com/Hatcat123/GraphicBed/master/Img/20190926213855.png" alt=""></p>
<p>目前比较广泛的应用是做仿真爬虫，即利用手机模拟器、无头浏览器来爬取 APP 或网站的数据，mitmpproxy 作为代理可以拦截、存储爬虫获取到的数据，或修改数据调整爬虫的行为。</p>
<p>最强功能，拿到数据包可进行二次开发（python语言）</p>
<p>快速上手一： 获取数据流</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">import mitmproxy.<span class="keyword">http</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">from</span> mitmproxy import ctx</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">num</span> = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">def request(flow: mitmproxy.<span class="keyword">http</span>.HTTPFlow):</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">global</span> <span class="built_in">num</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">num</span> = <span class="built_in">num</span> + <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    ctx.<span class="built_in">log</span>.info(<span class="string">"We've seen %d flows"</span> % <span class="built_in">num</span>)</span></pre></td></tr></table></figure>
<p>快速上手二： <strong>事件</strong>获取数据流</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">import mitmproxy.http</span></pre></td></tr><tr><td class="code"><pre><span class="line">from mitmproxy import ctx</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">self</span>.num = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(<span class="keyword">self</span>, <span class="symbol">flow:</span> mitmproxy.http.HTTPFlow)</span></span><span class="symbol">:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">self</span>.num = <span class="keyword">self</span>.num + <span class="number">1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ctx.log.info(<span class="string">"We've seen %d flows"</span> % <span class="keyword">self</span>.num)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">addons = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">    Counter()</span></pre></td></tr><tr><td class="code"><pre><span class="line">]</span></pre></td></tr></table></figure>

<p>请求web可视化界面展示</p>
<p>手动点击手机微信公众号文章，流量经过mimtproxy代理，在web端中能看到流量信息。明文展示。同时更多的信息也存在如：点赞、喜欢、阅读数。</p>
<p>点击刷新公众号主页与历史文章，获取公众号的基本信息，与历史文章的连接。</p>
<p>如何自动化？</p>
<p>设计一个公众号文章自动化爬取。</p>
<p>首先获取公众号的历史文章链接、再爬取链接获取详情页。但是不能自动化，就是说现在必须手动点击。才能获取数据。</p>
<p>之前说了<code>仿真爬虫</code>修改数据调整爬虫的行为。我们可以通过修改响应包中的内容，加入自动翻页的js。</p>
<p>实现10秒之后自动跳转到下个url</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="javascript">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#123;<span class="built_in">window</span>.location.href=<span class="string">'&#123;url&#125;'</span>;&#125;&#125;,<span class="number">10</span>);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>

<p>代替了我们手动点击下一个内容的请求。我么在返回的数据中注入上面的js，同时连接放入下一个请求的链接。周而复始。</p>
<p>注意：必须有一个手机端发送的起始请求。在断网情况下，将不能继续自动化。</p>
<p>整体架构图</p>
<p><img src="https://raw.githubusercontent.com/Hatcat123/GraphicBed/master/Img/20190926215618.png" alt=""></p>
<p>1、 需要一个公众号的id<br>2、 构造模拟请求历史文章列表的请求，手动发送（参数变化id）<br>3、 首页能获取到公众号的详情信息、存储到数据库<br>4、 获取到所有的公众号文章的链接、存储到数据库<br>5、 下页的公众号的历史数据通过注入js如page+1让程序自动爬取<br>6、 最后一页的返回公众号数据通过注入js如放入公众号文章的链接<br>7、 获取到公众号文章的数据、解析各种参数、存储数据库<br>8、 下页的公众号文章数据注入js如公众号文章链接<br>9、 最后一页的返回公众号文章数据注入js如：等待时间后重新执行2</p>
<p>这样完成持续监听，主动获取。</p>
<h3 id="0x04-Hook微信"><a href="#0x04-Hook微信" class="headerlink" title="0x04 Hook微信"></a>0x04 Hook微信</h3><p>借助微信hook，拦截修改某些call，填充进我们的Python代码，进行微信公众号文章的爬取</p>
<p>实现hook功能，申请内存，修改call，在里面写调用python逻辑</p>
<p>使用vs桌面应用c调动python程序</p>
<p>限制：每个版本的微信call偏移量不同。</p>
<p>优点：被动获取，请求量较少。</p>
<p>属于逆向方面的知识，还需要调用c、修改ddl。</p>
<p>找群里大神修改好的，直接用。</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>文章</title>
    <url>/2019/12/27/%E4%B8%AA%E4%BA%BA%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>本片主要记录本人写的文章，不方便公开，请勿尝试。</p>
<a id="more"></a>
<h1 id="雪花的春天"><a href="#雪花的春天" class="headerlink" title="雪花的春天"></a>雪花的春天</h1><h2 id="安生降生"><a href="#安生降生" class="headerlink" title="安生降生"></a>安生降生</h2><p>冬天就是雪的世界。</p>
<p>窗外的雪花扑打着大地，纷纷扰扰，就像是飞蛾扑火一般，渐渐地，屋顶变白了，枝丫变白了，整个大地都变白了，安生的开始就是这场雪的开始。</p>
<p>  “呱呱呱”随着清澈的婴儿的啼哭声，安生降临到这个世界，此时的大地分外的宁静，而这啼哭打破了宁静。</p>
<p>雪花飘飘洒洒，轻盈剔透，安生的带给这个世界的最初就是啼哭，似乎每个人都是这样的。</p>
<p>安生随着母亲被推出了产房，而已经听到婴儿哭声的安生的父亲早是迫切的看看这好似雪花的安生，抱着安生，刚想去亲一下，但害怕浓密的胡子会把孩子的皮肤给蹭破，没有把嘴凑上前去，而是把孩子小心翼翼的放入的安生奶奶的怀里。</p>
<p>  “这个娃好，长得俊”安生奶奶激动地说着。</p>
<p>外边的雪越下越大，没有要变小的感觉，就像安生一样，啼哭声越来越大，空旷的医院走廊上，充斥着安生对于世界的诉说，也许只有这场大雪才能听懂这个声音。</p>
<p>安生就这样降临到这个世界，像大雪一样，给这个期待已久的家庭带来了喜悦与憧憬。</p>
<h2 id="雪，停了"><a href="#雪，停了" class="headerlink" title="雪，停了"></a>雪，停了</h2><p>一天一夜之后，这场大雪也就随着寂静的黑夜一起走了，而这个家庭还沉醉在喜得贵子的喜悦中。</p>
<p>这时的安生，消停了许多，安静的沉睡在保温箱内，就像是地面上的雪花，经历了一生一次的降落，现在平静的沉睡在大地的怀抱里。</p>
<p>还没睁开双眼的安生，还是生活在自己的黑暗之中，不知道他的降落给这个家庭带来了多大的欢喜。</p>
<p>安生的母亲睡在病床上，经历的分娩之后，身体甚是虚弱。而安生的父亲却迫不及待地把这个消息让全世界都知道。</p>
<p>“叔，淑琴生了，是个男孩”安生的父亲激动地说着，刚接完这个电话，手机又响了，电话那头焦急的声音透过使用已久的手机听到</p>
<p>“林殊，孩子出生了吗？是男是女？”原来是远在新疆的二爷爷打来的电话，安生的爸爸也是激动的说，</p>
<p>“生了，生了，男孩，是个男孩”。</p>
<p>这时月光透过窗户，在雪地的反射的下，将外面照亮了，安生的父亲抬头看着月亮，虽然已经前前后后忙忙碌碌了四五天，但是似乎有使不完的力气，用不完的力气。</p>
<p>转身回到了病房，坐在妻子旁边，看着比自己还要辛苦的妻子，亲亲的把手捂了捂然后拨开妻子的额头上头发，窗外的夜光正好洒在保温箱上，安生也在恬静地睡着，世界如此的安静，安生的父亲也放下了身子，趴在妻子的旁边睡着了。</p>
<h2 id="安家"><a href="#安家" class="headerlink" title="安家"></a>安家</h2><p>安生的降生，给这个家庭带来的是希望，更让安生的母亲扬眉吐气。</p>
<p>安生的父亲是家中最小的儿子。虽然是老小，但是并没有得到该有的宠爱，在那个年代，吃穿还是个问题，而一个生命的诞生，甚至是一个男孩子的诞生只不多是一个家庭几天的喜头，更多的是为养活这个孩子的忧虑。</p>
<p>那个时代最大的节奏就是饿的节奏。饿着的身体却干着比身体还要重的活，大地的血液就是农民的汗水啊！</p>
<p>现在的生活好了，不在为吃饭而担忧了，但是并不比以前活的轻松，安生的爷爷已经去世了，那个时代的已经把一个家庭的顶梁柱活活的压塌了，还好这个家族没有倒下，一个个小顶梁柱矗立起来扛起了这个家庭。</p>
<p>如果爷爷还要在世的话，他应该是多么的高兴，甚至比安生父亲降生还要高兴吧，而此时的安生却不知道一个爱他的人只能在他模糊的梦里出现，上天总是让一些人不能遇见一些人就是为了增加想念吧。</p>
<p>安家是最有出息，也最有志气的。</p>
<p>安生的父亲虽然是家中的“天子骄子”，但是怀有志气的他对家境的破落感到失望，对那种面朝黄土，背朝天的生活发自内心的厌倦，为面包天天殚精竭虑的日子，每天都是煎熬，更何况那时有一口黄面馍吃就不错了。</p>
<p>家境就这样，安生父亲的几个哥哥姐姐都是没怎么上过学，不是没有那个脑子，只是家里的条件不允许。而到了安生父亲上学的时候，大姐已经出嫁了，大锅饭的日子也结束了，但是还是有天天干不完的农活，安生父亲上学也为这个刚刚走上正规的家庭带来了负担，而多年之后，安生的父亲的确有能力去撑起这个家族。</p>
<h2 id="离开这里"><a href="#离开这里" class="headerlink" title="离开这里"></a>离开这里</h2><p>“小娃，去南地找你二哥，你哥俩把南地的棒子地浇浇水。”安生爷爷低着头用耙子篓着粪。</p>
<p>大暑天，闷热的南风夹杂着熏人的臭味，扑在安生父亲的脸上。</p>
<p>起初，安生父亲没有反应过来，呆呆地站着。</p>
<p>“愣着啥呢，没有耳朵了”，一声大吼，安生父亲顿时感到后背一阵冰凉。</p>
<p>干农活，过着面朝黄土，背朝天的生活是安生父亲最不想的，他没有搭理父亲，转身回到屋里。</p>
<p>“这个小滚孙，耳朵不想要了，”说着提起耙子大步走向堂屋，嘴里还不停嘟囔着“看我不打死你，不干农活，大了肯定是个逛鬼”。</p>
<p>在安生爷爷的眼里，除了农事，一切都是不务正业。安安分分的当一辈子的农民，在他看来才是这辈子最值得骄傲的事情。</p>
<p>屋内传来了安生父亲的惨叫，但是他没有哭，认为正确的事情何必妥协，但是环顾这个家徒四壁的家，就在这时他决定以后一定要离开这里，永远不要回来，不在想念。</p>
<p>没有办法，安生父亲提着比自己还要高的锄头去了南地。一股股热浪沸腾着，在广阔的大地上肆虐。二哥正在河道边灌水，河道也快要枯竭了，水分的蒸发使大地裂开了一道道口子，更像是安生父亲心中的裂痕，对于这个家庭的失望，对于未来的迷茫。</p>
<p>二哥平时最宠爱安生的父亲，看到小娃来帮忙，赶紧扔下手中的水桶，用沾满泥土的手臂，擦了擦额头上汗珠，就朝着安生父亲跑去。</p>
<p>“弟，你怎么来了？这大热的天，这的活我能干完，你快回去吧”二哥边说边从小娃手中拿过锄头，推着他回去。</p>
<p>见弟弟没有反应，更是着急，拉着他去老杨树下乘凉。当触碰到二哥的手时，安生父亲震惊了，一个个老茧爬在哥哥的手上，那坚硬的关节，更让安生父亲下定决心，一定走出这里，不再回来。</p>
<h2 id="上学之苦"><a href="#上学之苦" class="headerlink" title="上学之苦"></a>上学之苦</h2><p>暑假终于过完了。</p>
<p>安生父亲痛苦的日子也随着闷热的南风吹散，回到教室的他，身上没有了泥渍味，是那么的清纯，那么超脱尘世，像是一个童子。</p>
<p>那个白衬衫是安生父亲唯一一件没有补丁的衣服，今天他就穿着这件衣服，阳光下，乳白的皮肤和白衬衫一样，没有半点的掺杂，回到熟悉的座位上，那个多少节课久久凝视的黑板，还有没有了玻璃的窗户，还有远方。</p>
<p>世界的尽头那是什么？是否就是书的海洋，没有黄土地，没有高粱地，没有各种农具。</p>
<p>憧憬着未来的他，被铃声惊醒，老师蹒跚着走进教室。在这个乡村小学上，就只有三个老师。一个将近七十岁的老人就是这所学校唯一的语文老师，还有两个老师都是上完初中就因为家庭条件不允许辍学的十六七的孩子。</p>
<p>安生父亲非常喜欢语文，特别是古文，唐诗宋词，就在这个没有昏暗的土屋里，他待了五年。这也是最记忆犹新的五年。这五年里，没有人知道谁比谁更富有，这里只有贫穷，吃着从家里拿来的黄面馒头，在水井旁舀一缸凉水，这样的午餐，这样的生活何时才是个尽头。夏天还好，到了冬天，那馒头硬的想石头一样，而那井水早就冻住了，一个人拿着砖头似的馒头啃着，生活给予那辈人的记忆是那么的鲜活，仿佛就昨天发生一样。当安生长大之后，父亲笑着给他说：“我们那时还是挺好的，我舅舅上学的时候只能吃盐哩。”都知道盐是那么的齁人，可是比起挨饿，这还是不错的。</p>
<p>安生不了解，也不可能了解。这就是一代人与一代人最大的不同，就像安生父亲不知道黄土地能给自己带来什么希望一样。老天让我们生在什么时代，降生在什么家庭，都是我们无法选择的，但是老天并没有决定我们怎么去活，没有人愿意跪着生活一辈子，安生父亲也一样。</p>
<p>“小娃，去把家后的柴火抱厨屋去。”</p>
<p>就这样柴火就从家后跑到了厨屋。</p>
<h2 id="金榜题名"><a href="#金榜题名" class="headerlink" title="金榜题名"></a>金榜题名</h2><p>冬天过的总比春天漫长，尤其在北方。</p>
<p>初雪在春节纷纷洒洒飘落在华北大地上，屋内热气翻腾，窗外的雪花见证了农家人最欢乐的时光，看着一年收获的粮食堆放在粮仓。终于可以安下心度过一年中最寒冷又最温暖的几天。</p>
<p>“小娃，学上的咋样，一定要有出息啊”二哥围坐在火炉旁边说。</p>
<p>“学上好有啥子用，到后来不还是要种地，还不如早点回家种地，少花几年冤枉钱。”在一边翻腾着饺子的爷爷听见了，瞪着二哥说。</p>
<p>“咱们安家上三辈就没出过读书人，小娃也得了吧。”爷爷又说道。</p>
<p>“爸，你咋能这样说啊，上三辈不能说不定下三辈就可以哩。”二哥瞅了瞅安生父亲点点头说。</p>
<p>安生父亲没有说话，摸摸地拿着火棍在在火炉里烤着，一会这铁制的火棍头上就成了赤红色。</p>
<p>这时，安生的奶奶，走了过来，摸了摸安生父亲的头。平时她最疼爱安生父亲，知道他是一个读书的料，如果不是奶奶的坚持，安生父亲可能早就想他几个哥哥一样下地干活了。就上学的事，奶奶没少和爷爷吵。爷爷也被奶奶说服了，一个家不能都是种地的，那将来有啥出息。</p>
<p>安生就这样保住了走出这个家最好的机会。这也是他以后撑起这个家最好的机会。</p>
<p>最冷的冬天在翻腾的热浪中度过了。</p>
<p>初春从来不怕冬天的尾巴的，柳条上有挂上了稀疏的绿，堆积了整个冬天的白色就这几天全都消失了，干干净净的绿代替了一切，农家人的土地也变绿了，麦苗积蓄了一冬天的力量，这几天拼命地长着。安生父亲也从深冬走出，面对这新世界的绿，他知道自己将来要去的世界一年四季都是这么清澈的绿，走在小道上，安生父亲漫无目的走着，想着，不知不觉走到了还没有开学的学校。</p>
<p>紧闭的大门，不知道多少次，他从这里开心的走进去，这是他待在这个学校的最后半年了，这个夏天就是他命运的转折点，是金榜题名，还是回到黄土地上复制父亲的一生，就在这个夏天得到最终的答案。</p>
<p>又走上前几步，没有了活气的校园像墓地一样，而这里是农家人走出这里的象牙塔。</p>
<p>静静地看着校园，希望永远活在这里面，不出去，这样的想法多少次出现在安身父亲的梦里，但是醒来后发现还有更多的农活等着他去干。现实的残酷让他不知道梦到底是不是真的，是不是还另外一个世界在等着他。</p>
<p>春去夏来，杨树上的知了聒噪着，细想想这知了和安生父亲和相似。沉睡在土地里数十年，在黑暗中想象着外面的世界到底是什么样子的，而数十年的等待换来的只有一夏的聒噪，随着秋天的到来，它也要结束自己的生命，可是谁能记住那些蝉鸣，谁能想起还有他们的存在。</p>
<p>结业考试就是在蝉声中过去了。这个学校只有三个可以保送到镇上重点高中上学的名额。而这三个名额也是通向美好世界的第一张通行证。</p>
<p>总是提前交卷的他，这次也是这样。在多次检查没有错误后，就匆匆交了卷。背着满是补丁的背包朝着家的方向走去。刚走到村口，就看到一个佝偻的身躯，随着越走越近，这才看清楚原来是父亲，那么的苍老，好像一夜老了十岁一样。</p>
<p>“小娃，卷子写完了，难不难？”父亲着急地问着。</p>
<p>“还那样，不难。”安生父亲不屑地说着。</p>
<p>“那就好。”父亲悬着的心终于放下了。</p>
<p>爷俩就沿着小道走向回家的路。</p>
<p>几天后，到了放榜的时候了。安生父亲并没有激动，他知道那三个名额必定有自己的一个。</p>
<p>那天父亲陪着他去的，刚下完下雨，但是热浪并没有被雨刷殆尽，闷热的空气依旧笼罩着大地，笼罩着读书人的心。</p>
<p>去学校的路上，泥泞的小道，安生父亲不知道多少次走在上面，而他的父亲还是第一次去他的学校。稻田地里的蛙声不绝，刚刚插下的稻秧，沉睡在浅浅的水田地里。</p>
<p>爷俩没说对话，还是一个在前，一个在后。</p>
<p>“老安头，你家娃，有出息了，上榜了”他们刚走到学校门口，就迎面遇见家住二队吃公社饭时一起下地的老王，细想想，他家的娃今年也要参加考试了。</p>
<p>“你家娃……”话还没有说出口就收了回来，看到老王叹气声，就知道他家娃没考上。</p>
<p>“我们家娃也没啥出息，这次也就是走狗屎运了。要不是他娘掏出心窝让他读，我早把他赶地里了。”表面上怪罪着他娘，心里不知道怎么乐呵着呢。</p>
<p>“哎，都是我娃不争气，种田的料，你家安娃可是当干部的命啊”老王头说着，摆了摆手，摇了摇头蹒跚走了。</p>
<p>到了公告栏前，第一个名字就是安生父亲。这也是他早就知道的，因为这个场景已经出现在他的无数个梦里。梦里他是那么的开心，而现在这张榜单就在自己的面前，却没有了多少的激动。</p>
<p>夕阳西下，爷俩的背影印在绯红的夕阳里。</p>
<p>人生的就是这样，没有遇见总是想象，等到遇见后，也没有多少惊奇。</p>
<h2 id="没有了，一切"><a href="#没有了，一切" class="headerlink" title="没有了，一切"></a>没有了，一切</h2><p>古代就有三喜金榜题名时，洞房花烛夜，产房传喜讯。</p>
<p>安家终于出了个读书人，一个有出息的读书人，四周的邻居听说了安娃要去镇上去上高中了，纷纷来安家道贺。</p>
<p>“这娃，从小看这长大，一看就是读书的料。”对门的刘大妈满脸油光，大大咧咧地说着。</p>
<p>“安家，可是祖坟冒青烟了。”大家都这样说。</p>
<p>可是，安生父亲并没有那些乡亲们那么高兴，一个十五六的孩子，有着超乎常人的淡定。多少次想要离开这里。一旦真要离开了，又有点舍不得。那生活了十五年的家，是不那么容易就舍弃的。平静的他，细细想想，这个家除了贫穷，没有啥是不好的，一直支持他的母亲，那么爱护他的哥哥，还有家里的那只陪伴他成长的小黄狗。他陷入深深的沉思中。</p>
<p>“安娃，你过来一下。”父亲的喊声让他一愣，摸了摸脑袋，好像还没睡醒一样。</p>
<p>“娃，你陪我去趟南地吧，还有点活要干。”父亲眼神迷离，一种求人的语气，一下子让他没法不答应。</p>
<p>安生父亲长这么大，父亲对他的语气只有命令，而这次父亲却语气那么平和。</p>
<p>“好吧，我去那本书，抽空看看。”说完转身去屋里拿了不知道读多少遍的《钢铁是怎样炼成的》。</p>
<p>父子俩一路上没有说话。稻秧已有膝盖那么高，青青翠翠。已近夏末，蛙鸣也少了，而蝉用最后的力气诉说着对这个世界最后的憧憬。</p>
<p>到了自家地的地头，父亲把农具放在田头，独自一人走向田中央，这时夏天的尾巴清扫着大地，就像是母亲爱抚着婴儿一样，没有一点的轻浮，没有一丝的敷衍。安生父亲站在地头，呼吸着甘甜的空气，好久没有呼吸到这样的空气了，压抑在家里那么久，没有出来过，这次联考结束，终于可以好好放松一下了。</p>
<p>“过来一下，安娃。”父亲回头对安生父亲说。</p>
<p>“哦”安生父亲转身坐在地头。</p>
<p>父亲的手搓着地上的枯草，迟迟没有抬头。</p>
<p>“啥事？”安生父亲反问道。</p>
<p>父亲还是没有说话，低头继续搓着。</p>
<p>“娃啊，这学咱们别上了，行吗？”父亲低声说，似乎不想让他听见。</p>
<p>但是这句话，深深刺进了安生父亲的心里。</p>
<p>“啥？不让我上学了？那我能干啥？陪你种一辈子的地？”安生父亲起身吼着。</p>
<p>这是他第一次这样对待自己的父亲，以前的反对都是以他的屈服草草结束，而这次他站了起来。没有了平日的懦弱，生活教会了他屈服，但是对未来的向往让他这次发了疯的咆哮。</p>
<p>“娃，爹对不起你，知道你的心高，不想在这黄土地滚爬一辈子，但是爹也是没本事，都怪爹。”父亲抬头看了看远方，指了指远处又说“外边的世界不是属于我们这些人的，我们就是黄土地的草，到了别地活不了的。”</p>
<p>“草，哪没有，城市的草就比黄土地的草难活？”安生父亲没等父亲说完就说了。</p>
<p>太阳没过了山头，洒下最后的光辉。安生父亲没有回家，走了，没有回头，父亲拍了拍裤脚上的土，自言自语道“孩子大了，闯闯吧。”</p>
<p>在夕阳的余晖下，两个背影，一个向东，一个向西，一个现实，一个未来。</p>
<h2 id="外面的世界"><a href="#外面的世界" class="headerlink" title="外面的世界"></a>外面的世界</h2><p>这是安生父亲第一次离开家，离开黄土地。</p>
<p>天渐渐黑了，没有光，盲人似地在走着。往日的这个时候他已经和家人一起吃着残羹冷炙。四周的黑暗让他有点动摇，更确切地说是对未来的迷茫，现实让他的“双眼失明”，没有勇气再去追随自己的梦想，巨大的落差让他从高高在上的村里的红人一天变成了没有归宿的浪人。</p>
<p>父亲回到家中，一大家子人都在等着家里的未来的顶梁柱回来吃饭，母亲看到只有父亲一个人回来，就问，</p>
<p>“他爹，娃怎么没回来，这么晚了，后山可是有狼的”母亲越说越着急，放下刚从锅里盛出的稀饭，催着二哥去找。</p>
<p>二哥见状，急忙放下手中的碗筷，转身拿着手电筒就出去了。</p>
<p>正值农历月初，弯弯的月牙镶嵌在黑暗的夜空中，孱弱的月光隐隐照亮安生父亲的远去的路，没有了家人的陪伴，没有了热气腾腾的晚饭，陪伴他的只有无尽的长路，弯弯的初月。</p>
<p>二哥拿着手电筒着急的在前面照着，母亲就在后面紧紧地跟在，</p>
<p>满山传来“安娃，你要去哪？快回家吧”。</p>
<p>可是，这时的安生父亲早已听不见这些呼喊。呼喊声回响在山间微风夹杂着山花的香气，以及没来得及归巢的山雀，这些自从安生父亲降生就陪伴他的，今晚就要离他而去，不，是他离他们而去。</p>
<h1 id="离开"><a href="#离开" class="headerlink" title="离开"></a>离开</h1><p>我小的时候，不知道离开意味着什么。离开就不是花凋谢，化为春泥吗？</p>
<p>小就是小，但是现在想想还是点哲理的。离开就是为了下一次的遇见，就像花一样，今年的谢了，明年不是还有吗？还能遇见它。它虽不是那年的那一朵，但是给我的感觉还是一样的相似，明媚可爱。</p>
<p>圣经上说“我们生于泥土，有必将回归泥土，所以灵魂就选择了大地”。离开与遇见就轮回这，只不过肉体的不同，但是感觉一样，一样熟悉。</p>
<p>长大了，经历的离开也就多了。首先是与家里养的狗的分别，狗的一生也就短短十几年。今年我二十二，但是却与五六只狗分别过了，不能说是分别，我想，分别总是感觉是计划好的，我俩都下定决心的，而他们的离开都是意外的，不管在我高兴，还是伤心的时候。他们总是在我不经意之间变成了我的回忆。回忆多了，就不觉地那是意外了，那一天总会发生，只不过不是约定好的罢了。</p>
<p>我离开了许多，背弃了许多，不是所有的意外我都是可以坦然地接受的，接受不了了，逃避就成了我唯一的选择。我不知道还有什么比逃避给的快感更多。逃避多了，就感觉身体甚至灵魂不是自己的了。行尸走肉就是说的这种状态。</p>
<p>幸好，我知道了，离开不是放纵，不是让自己的魂丢了，我渐渐找到肉体，找到灵魂，找到原来的自己。魂离开了肉体，就是鬼，肉体离开了灵魂，就是尸体。离开是必然的，但是花的离开是为了明年的再次绽放，生命中一些东西的离开，是为了锻炼我们，让我们独立，独立地活着。</p>
<h1 id="我与它"><a href="#我与它" class="headerlink" title="我与它"></a>我与它</h1><p>狗一般都是护家的，而在它生命的最后几天，就要离开，离开守护一辈子的家。</p>
<p>我与这只狗的相识是在七八年前吧，狗我见的多了，与狗的生死离别也经历多了，而与这只狗的离别，我没有感到悲伤，甚至说我祝福它的离开。离开就注定分别，我与它的分别就发生在我寒假结束去学校的时候。</p>
<p>那时，这只狗正处于恐惧中，一直争强好胜的它让邻居家的大狗咬得满嘴是血。我不知道怎么安慰它，怎么叫它的名字都不转过头，似乎不认识你了，这是让我最伤心的，一个亲人一日之间不与你相认，不知道你是否还在不在他的脑海中。</p>
<p>没有时间了，我明早的火车。我俩的分别就发生在我走的前一个晚上。那天是星期六，元宵节过后的第一个星期六。</p>
<p>我没有意识到这个分别竟是永久的分别，也不知道那个平凡的周六的晚上，现在我回忆的竟是那么地清晰。它死死地藏在厨房的角落了，我高高兴兴地陪着姥姥打羽毛球，我把所有的心思都放在姥姥身上，而那冰冷的角落里的它，还在颤颤发抖。</p>
<p>我走了，听妈妈说过几天它也好了，恢复了往日的活泼。</p>
<p>我知道它会好的，毕竟它是争强好胜的狗，不服输的狗，那个角落不属于它的，它的目标是姥姥家周围更大的领地。</p>
<p>我听说噩耗就发生在今晚，四月的第二个星期一，而它的离开发生在四月的第一个星期六，我和它离开也在星期六。我和往常一样和妈妈视频聊天，聊到最后时，就随口问了问它的情况。</p>
<p>“儿子，它丢了，丢了一周了。”妈妈收住了刚才的笑脸。</p>
<p>我顿时也是惊讶，怎么会丢啊，它可是姥姥家旁边一片的百事通啊，怎么会丢啊，不会的，两年了它都会自己回家的。这次怎么会丢啊。不会的。</p>
<p>我结束了视频。结束了我的疑惑。我想起了，狗死之前都会离开自己的家的，不想死在家中，让主人伤心。它肯定又回到了角落里，静静地等待死亡的降临。角落里，往日只会短暂的停留，可是这次，它会永久地在这里，那么平静。</p>
<p>好了，我会怀念它，但我不会伤心。我佩服它的决绝，那么地决绝，离开一生守护它的家，离开这个世界。</p>
<p>对了，它叫仔仔。记住它，它叫仔仔。</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>搜索关键字标红</title>
    <url>/2019/12/27/%E6%90%9C%E7%B4%A2%E5%85%B3%E9%94%AE%E5%AD%97%E6%A0%87%E7%BA%A2/</url>
    <content><![CDATA[<p>在开发<a href="http://wechat.doonsec.com/" target="_blank" rel="noopener">微信聚合平台</a>的时候，用户进行搜索的时候，将搜索结果中包含用户输入的关键字标红，以方便用户发现差异。</p>
<a id="more"></a>
<p><strong>处理函数</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHeightKeyWord</span>(<span class="params">keyword</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* 获取需要处理的关键字 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> tempHTML = $(<span class="string">"#demo"</span>).html();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* 关键字替换文本 该文本设置有高亮颜色 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> replaceText = <span class="string">"&lt;font style='color:red;'&gt;$1&lt;/font&gt;"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* 关键字正则匹配规则 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> r = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + keyword + <span class="string">")"</span>, <span class="string">"ig"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* 将匹配到的关键字替换成我们预设的文本 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    tempHTML = tempHTML.replace(r, replaceText);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">/* 将文本显示到浏览器上 */</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> tempHTML</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">// $("#demo").html(tempHTML);</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>因为文章使用的信息流加载，所以次函数没有使用，只是核心就是这个正则表达式，然后进行相应的文本替换即可，同时记录下判断用户输入是否未空的判断</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (keyword.match(<span class="regexp">/^[ ]*$/</span>))&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    layer.msg(<span class="string">"搜索关键词不能为空！"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> ;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Layui流加载模块使用</title>
    <url>/2019/12/27/Layui%E6%B5%81%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在开发<a href="http://wechat.doonsec.com/" target="_blank" rel="noopener">微信集合平台</a>的时候，首页展示公众号文章的时候，由于文章太多，展示不完，于是想到了使用流加载，下面记录如何使用Layui框架实现流加载。</p>
<a id="more"></a>

<h3 id="0x01-html代码"><a href="#0x01-html代码" class="headerlink" title="0x01 html代码"></a>0x01 html代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">data-num</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"num"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article"</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>
<p><code>span</code>标签的作用是，由于默认页面展示最新的文章，如果用户点击媒体社区类下的文章，在向下滑动的时候，也会导致最新文章的接口也会被调用，导致资源被浪费，通过判断<code>span</code>标签的<code>data-num</code>值，在请求之前，先判断值，在进行接口调用，这样就不会导致资源浪费，以下值对应的含义</p>
<ul>
<li>1：最新文章（默认展示）</li>
<li>2：某个公众号下的文章（如i春秋）</li>
<li>3：分类下的文章（如社区媒体类）</li>
<li>4：搜索内容</li>
</ul>
<p>以下以某个公众号文章展示如何实现流加载</p>
<h3 id="0x02-javascript-代码"><a href="#0x02-javascript-代码" class="headerlink" title="0x02 javascript 代码"></a>0x02 javascript 代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">   $.ajaxSetup(&#123;<span class="attr">cache</span>:<span class="literal">false</span>&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="string">".layui-colla-content a"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> a = $(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> id = a.attr(<span class="string">'img-data'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> flag = $(<span class="string">"#num"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        flag.attr(<span class="string">'data-num'</span>, <span class="string">"2"</span>); <span class="comment">//初始化flag值为2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        $(<span class="string">"#demo"</span>).empty();<span class="comment">//将文章列表清空</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        layui.use(<span class="string">'flow'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">//此部分为流加载</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">var</span> flow = layui.flow;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            flow.load(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                elem: <span class="string">'#demo'</span> <span class="comment">//指定列表容器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               ,<span class="attr">scrollElem</span>: <span class="string">'#demo'</span> <span class="comment">//滚动条所在元素选择器</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                , <span class="attr">isAuto</span>: <span class="literal">true</span> <span class="comment">//是否自动加载，如果设为false，点会在列表底部生成一个“加载更多”的button，则只能点击它才会加载下一页数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                , <span class="attr">mb</span>: <span class="number">1</span> <span class="comment">//与底部的临界距离</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                , <span class="attr">done</span>: <span class="function"><span class="keyword">function</span> (<span class="params">page, next</span>) </span>&#123; <span class="comment">//到达临界点（默认滚动触发），触发下一页</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    layer.load();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">var</span> lis = [];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="comment">//以jQuery的Ajax请求为例，请求下一页数据（注意：page是从2开始返回）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (flag.attr(<span class="string">'data-num'</span>) == <span class="string">'2'</span>) &#123; <span class="comment">//在发送请求的时候，先判断下值，如果是这个值的话，才发送请求，防止下滑时，每个接口都请求</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">var</span> url = <span class="string">'/articles/?page='</span> + page + <span class="string">'&amp;id='</span> + id;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        $.<span class="keyword">get</span>(url, function (res) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="comment">//假设你的列表返回在data集合中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                             layer.closeAll(<span class="string">'loading'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            layui.each(res.data, <span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                lis.push()  <span class="comment">//此处将获取的data信息，展示到页面中，此处push函数里面为传入前端的html代码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                            &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="comment">//执行下一页渲染，第二参数为：满足“加载更多”的条件，即后面仍有分页</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="comment">//pages为Ajax返回的总页数，只有当前页小于总页数的情况下，才会继续出现加载更多</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                            next(lis.join(<span class="string">''</span>), page &lt; res.count);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            url = <span class="string">''</span> <span class="comment">//重新赋值，必须的，原文档没有，不重新赋值，好像有bug</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
<h3 id="0x03-后端"><a href="#0x03-后端" class="headerlink" title="0x03 后端"></a>0x03 后端</h3><p>后端的话，就按照正常的分页写即可。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Layui</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Layui轮播图模块使用</title>
    <url>/2019/12/26/Layui%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>以前完成轮播图使用的是Bootstrap的插件，但是现在使用Layui框架，下面记录如何使用Layui来完成轮播图功能。</p>
<a id="more"></a>

<h3 id="0x01-html代码"><a href="#0x01-html代码" class="headerlink" title="0x01 html代码"></a>0x01 html代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-carousel"</span> <span class="attr">id</span>=<span class="string">"test1"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">carousel-item</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;% for banner in banners %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;&#123; banner.link_url &#125;&#125;"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; banner.image_url &#125;&#125;"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#123;% endfor %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>
<h3 id="0x02-javascript代码"><a href="#0x02-javascript代码" class="headerlink" title="0x02 javascript代码"></a>0x02 javascript代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">layui.use([<span class="string">'carousel'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> carousel = layui.carousel;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment">//建造实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">var</span> form = layui.form;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    carousel.render(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elem: <span class="string">'#test1'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        , <span class="attr">width</span>: <span class="string">'100%'</span> <span class="comment">//设置容器宽度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        , <span class="attr">arrow</span>: <span class="string">'hover'</span> <span class="comment">//始终显示箭头</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ,<span class="attr">anim</span>: <span class="string">'default'</span> <span class="comment">//切换动画方式</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ,<span class="attr">interval</span>:<span class="number">7000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr></table></figure>
<h3 id="0x03-其他参数"><a href="#0x03-其他参数" class="headerlink" title="0x03 其他参数"></a>0x03 其他参数</h3><p>具体参数见：<a href="https://www.layui.com/doc/modules/carousel.html#options" target="_blank" rel="noopener">Layui轮播图文档</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Layui</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>悬浮展示公众号二维码</title>
    <url>/2019/12/26/%E6%82%AC%E6%B5%AE%E5%B1%95%E7%A4%BA%E5%85%AC%E4%BC%97%E5%8F%B7%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<p>在<a href="http://wechat.doonsec.com/" target="_blank" rel="noopener">微信集合平台</a>上右边栏公众号展示收录的公众号，光秃秃的，想增加个功能，当悬浮在标签上的时候显示相应公众号的二维码。</p>
<a id="more"></a>

<h3 id="0x01-实现方法"><a href="#0x01-实现方法" class="headerlink" title="0x01 实现方法"></a>0x01 实现方法</h3><p>对于前端不太了解的我总结了两种方法实现这个功能：</p>
<ul>
<li>页面加载的时候，就将所有图片加载过来，只是不展示，当悬浮上面的时候，再进行展示</li>
<li>页面记载的时候不加载图片，当用户鼠标悬浮的时候，再进行请求</li>
</ul>
<p>比较两种方法，当然第二种方法，比较好，减少不必要的资源浪费，如果用户想看二维码，这些图片资源浪费了，所有下面记录如何使用第二种方法实现此功能</p>
<h3 id="0x02-前端展示"><a href="#0x02-前端展示" class="headerlink" title="0x02 前端展示"></a>0x02 前端展示</h3><p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/%E5%89%8D%E7%AB%AF.JPG" alt="前端展示"><br>以下代码为对应图片展示，所有功能都在<code>class=layui-colla-content</code>的div中进行，展示在<code>class=tips</code>的div中，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-colla-content"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;% for foo in tag.accounts %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">img-data</span>=<span class="string">"&#123;&#123; foo.account_id &#125;&#125;"</span> <span class="attr">img-name</span>=<span class="string">"&#123;&#123; foo.account_name &#125;&#125;"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">span</span></span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"&#123;&#123; tag_style|random &#125;&#125;"</span> <span class="attr">id</span>=<span class="string">"tag"</span>&gt;</span>&#123;&#123; foo.account_name &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tipscont"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;% endfor %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>
<p>样式如下（可能样式不满足你的需求，可以自己写）:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.tips</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">position</span>:absolute;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">top</span>:-<span class="number">53px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">left</span>:<span class="number">300px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">width</span>:<span class="number">182px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">height</span>:<span class="number">123px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">visibility</span>:hidden;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(../img/tipbg.png) no-repeat;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">opacity</span>:<span class="number">0.0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">-moz-transition</span>:all <span class="number">0.5s</span> ease;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">-webkit-transition</span>:all <span class="number">0.5s</span> ease;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">-o-transition</span>:all <span class="number">0.5s</span> ease;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.tips</span> <span class="selector-class">.tipscont</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">text-align</span>:center;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">margin</span>:<span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="selector-class">.hover</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">visibility</span>: visible;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">top</span>: <span class="number">70px</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">left</span>: <span class="number">100%</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<h3 id="0x03-悬浮事件"><a href="#0x03-悬浮事件" class="headerlink" title="0x03 悬浮事件"></a>0x03 悬浮事件</h3><p>监听每个a标签的悬浮事件，当触发事件后请求图片链接，然后加载图片</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="string">".layui-colla-content span a"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $(<span class="keyword">this</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="keyword">this</span>).parent().find(<span class="string">".tips"</span>).addClass(<span class="string">"hover"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="keyword">this</span>).parent().addClass(<span class="string">"lihover"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">var</span> self = $(<span class="keyword">this</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">var</span> account_id = $(<span class="keyword">this</span>).attr(<span class="string">'img-data'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> (self.next().find(<span class="string">'img'</span>).attr(<span class="string">'src'</span>).length !== <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            zlajax.get(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'url'</span>: <span class="string">'/get_img/'</span>,  </span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'data'</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="string">'account_id'</span>: account_id,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="string">'success'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> (data[<span class="string">'code'</span>] === <span class="number">200</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="built_in">console</span>.log(data);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">var</span> img = data[<span class="string">'data'</span>][<span class="string">'img'</span>];</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        self.next().find(<span class="string">'img'</span>).attr(<span class="string">'src'</span>, img);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        layer.msg(data[<span class="string">'message'</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="keyword">this</span>).parent().find(<span class="string">".tips"</span>).removeClass(<span class="string">"hover"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            $(<span class="keyword">this</span>).parent().removeClass(<span class="string">"lihover"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
<h3 id="0x04-后端处理"><a href="#0x04-后端处理" class="headerlink" title="0x04 后端处理"></a>0x04 后端处理</h3><p>获取公众号的<code>id</code>，查找后返回图片的链接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@bp.route('get_img/')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_img</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    account_id = request.args.get(<span class="string">'account_id'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> account_id:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        account = WechatAccount.query.filter_by(__biz=account_id.strip()).first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> account:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            img = account.qr_code</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> field.success(message=<span class="string">'查询成功'</span>, data=&#123;<span class="string">'img'</span>: img&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> field.params_error(<span class="string">''</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> field.params_error(<span class="string">'参数错误'</span>)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>酷安应用商店爬虫</title>
    <url>/2019/12/26/%E9%85%B7%E5%AE%89%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>以前同学需要爬取酷安应用商店的各个APP的下载链接，然后进行分析，果断帮了这个忙。分析了一下，这个网站也没有反爬，正常爬取即可，这个网站不像小米应用商店，需要解析Html内容。</p>
<a id="more"></a>
<h3 id="0x01-技术点"><a href="#0x01-技术点" class="headerlink" title="0x01 技术点"></a>0x01 技术点</h3><ul>
<li>生产者消费者模型，加快两层爬虫爬取效率</li>
<li><code>re</code>、<code>xpath</code>使用</li>
<li>分析下载链接不能使用，最后发现下载的时候需要带cookie</li>
</ul>
<h3 id="0x02-如何使用"><a href="#0x02-如何使用" class="headerlink" title="0x02 如何使用"></a>0x02 如何使用</h3><p>酷安的app分两个类别apk和game实例类的时候传入其中之一，以及爬取的页数即可。</p>
<h3 id="0x03-源代码"><a href="#0x03-源代码" class="headerlink" title="0x03 源代码"></a>0x03 源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'Joynice'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KuAn</span><span class="params">(object)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, type, page)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.type = type</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.page = page</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.header = &#123;<span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36'</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.csv_header = [<span class="string">'应用名称'</span>, <span class="string">'下载链接'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">with</span> open(<span class="string">'&#123;&#125;.csv'</span>.format(self.type), <span class="string">'a+'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            csv_file = csv.writer(f)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            csv_file.writerow(self.csv_header)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.url = <span class="string">'https://www.coolapk.com'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.base_url = <span class="string">'https://www.coolapk.com/&#123;&#125;'</span>.format(type)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> type <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">'apk'</span>, <span class="string">'game'</span>]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'type参数不在范围内'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.page_url_queue = queue.Queue()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.detail_url_queue = queue.Queue()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.save_queue = queue.Queue()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_detail_url_fun</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            page_url = self.page_url_queue.get()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            req = requests.get(url=page_url,headers=self.header)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> req.status_code == <span class="number">200</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                req.encoding = req.apparent_encoding</span></pre></td></tr><tr><td class="code"><pre><span class="line">                html = etree.HTML(req.text)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                path = html.xpath(<span class="string">'//*[@class="app_left_list"]/a/@href'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> path:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    detail_url = self.url + _</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    print(<span class="string">'正在获取详情链接:'</span>,detail_url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    self.detail_url_queue.put(deepcopy(detail_url))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            self.page_url_queue.task_done()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_download_url_fun</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            detail_url = self.detail_url_queue.get()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            req = requests.get(url=detail_url, headers=self.header)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> req.status_code == <span class="number">200</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                req.encoding = <span class="string">'utf-8'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                url_reg = <span class="string">'"(.*?)&amp;from=click'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                name_reg = <span class="string">'&lt;p class="detail_app_title"&gt;(.*?)&lt;'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                download_url = re.findall(url_reg, req.text)[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                name = re.findall(name_reg, req.text)[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data = &#123;<span class="string">'name'</span>: name, <span class="string">'url'</span>: download_url&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                print(<span class="string">'获取到数据:'</span>, data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                self.save_queue.put(data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            self.detail_url_queue.task_done()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_data_fun</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data = self.save_queue.get()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            name = data.get(<span class="string">'name'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            url = data.get(<span class="string">'url'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">with</span> open(<span class="string">'&#123;&#125;.csv'</span>.format(self.type), <span class="string">'a+'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                csv_file = csv.writer(f)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                csv_file.writerow([name, url])</span></pre></td></tr><tr><td class="code"><pre><span class="line">            self.save_queue.task_done()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1</span>, self.page+<span class="number">1</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            page_url = self.base_url + <span class="string">'?p=&#123;&#125;'</span>.format(_)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'下发页面url'</span>, page_url)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            self.page_url_queue.put(page_url)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        thread_list = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            get_detail_url = threading.Thread(target=self.get_detail_url_fun)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            thread_list.append(get_detail_url)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">5</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            get_download_url = threading.Thread(target=self.get_download_url_fun)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            thread_list.append(get_download_url)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">2</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            save_data = threading.Thread(target=self.save_data_fun)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            thread_list.append(save_data)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            t.setDaemon(<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            t.start()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> q <span class="keyword">in</span> [self.page_url_queue, self.detail_url_queue, self.save_queue]:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            q.join()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'爬取完成，结束'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    a= KuAn(type=<span class="string">'apk'</span>, page=<span class="number">302</span>).run()</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>toTop插件使用</title>
    <url>/2019/12/25/toTop%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在开发微信集合平台的时候，因为页面采取流加载，为了方便用户快速回到顶部，于是找到了toTop插件，小巧方面。为了方便以后查看，记录下如何使用。</p>
<a id="more"></a>

<blockquote>
<p><a href="http://www.jqhtml.com/wp-content/uploads/2017/07/wz/toTop.zip" target="_blank" rel="noopener">下载地址</a>，自行下载</p>
</blockquote>
<h3 id="0x01-引入文件"><a href="#0x01-引入文件" class="headerlink" title="0x01 引入文件"></a>0x01 引入文件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='common/jquery.toTop.min.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>
<h3 id="0x02-设置元素"><a href="#0x02-设置元素" class="headerlink" title="0x02 设置元素"></a>0x02 设置元素</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"layui-btn layui-btn-radius layui-btn-lg to-top"</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></pre></td></tr></table></figure>
<h3 id="0x03-绑定元素"><a href="#0x03-绑定元素" class="headerlink" title="0x03 绑定元素"></a>0x03 绑定元素</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="string">'.to-top'</span>).toTop();</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
<p><strong>配置</strong><br>|属性/方法|类型|默认值|说明|<br>|—|—|—|—|<br>|autohide|布尔值|true|自动隐藏|<br>|offset|整数|420|距离顶部多少距离时自动隐藏|<br>|speed|整数|500|滚动持续时间|<br>|position|布尔值|true|如果设置为 false，则需要手动在 css 中设置“按钮”的位置|<br>|right|整数|15|右侧位置|<br>|bottom|整数|30|底部位置|</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>ToTop</tag>
      </tags>
  </entry>
  <entry>
    <title>slimscroll插件使用</title>
    <url>/2019/12/25/slimscroll%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在开发微信聚合平台的时候，需要给公告的div设置个滚轮，防止太大，影响下面元素，各种找插件最后找到slimscroll这个插件，使用起来非常方便，记录下，方便以后查找。</p>
<a id="more"></a>
<blockquote>
<p><a href="https://www.bootcdn.cn/jQuery-slimScroll/" target="_blank" rel="noopener">CDN链接</a>，自行下载</p>
</blockquote>
<h3 id="0x01-引入插件"><a href="#0x01-引入插件" class="headerlink" title="0x01 引入插件"></a>0x01 引入插件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='common/jquery.slimscroll.min.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>
<h3 id="指定内容"><a href="#指定内容" class="headerlink" title="指定内容"></a>指定内容</h3><p>指定<code>id=&quot;box&quot;</code>的div设置滚动</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-card-body1"</span> <span class="attr">id</span>=<span class="string">"box"</span> <span class="attr">style</span>=<span class="string">"height: 100px"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; announcement.context|safe &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>
<h3 id="绑定元素"><a href="#绑定元素" class="headerlink" title="绑定元素"></a>绑定元素</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(<span class="string">'#box'</span>).slimScroll(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        height: <span class="string">'100'</span>, <span class="comment">//容器高度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        size: <span class="string">"6px"</span>, <span class="comment">//滚动条宽度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        color: <span class="string">"#009688"</span>, <span class="comment">//滚动条颜色,默认#000000</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        alwaysVisible: <span class="literal">true</span>, <span class="comment">//是否禁用隐藏滚动条,默认false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        opacity: <span class="number">4</span>,  <span class="comment">// 滚动条透明度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Slimscroll</tag>
      </tags>
  </entry>
  <entry>
    <title>小米应用商店爬虫</title>
    <url>/2019/12/25/%E5%B0%8F%E7%B1%B3%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>应以前同学需要爬取小米应用商店的各个APP的下载链接，然后进行分析，果断帮了这个忙。分析了一下，这个网站也没有反爬，正常爬取即可，找到接口进行获取数据。</p>
<a id="more"></a>

<h3 id="0x01-技术点"><a href="#0x01-技术点" class="headerlink" title="0x01 技术点"></a>0x01 技术点</h3><p>技术点有两点吧：</p>
<ul>
<li>接口频繁访问导致500错误，但是我不想<code>time.sleep()</code>，于是将无法访问的链接保存下来，最后在进行重新爬取</li>
<li>分析下载链接的时候，本来的下载链接，还需要进到详情页获取，然后分析下，构造下载链接可以使用<code>download/id</code>也可以下载，少了一层爬取。</li>
</ul>
<h3 id="0x02-如何使用"><a href="#0x02-如何使用" class="headerlink" title="0x02 如何使用"></a>0x02 如何使用</h3><p>获取小米应用商店每个类别的id，如游戏为15，类实例的时候传入，如果你想获取全部，自己写个for循环。</p>
<h3 id="0x03-源代码"><a href="#0x03-源代码" class="headerlink" title="0x03 源代码"></a>0x03 源代码</h3><p>放下源代码，省的找了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'Joynice'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> queue</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XiaoMiShop</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, category)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.base_url = <span class="string">'http://app.mi.com/categotyAllListApi'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.base_download = <span class="string">'http://app.mi.com/download/'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.header = <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.csv_header = [<span class="string">'ID'</span>, <span class="string">'应用名称'</span>, <span class="string">'下载链接'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.max_page = <span class="number">70</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.category = category</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.queue = queue.Queue()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clean_data</span><span class="params">(self, data)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        提取数据，放入队列中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param data:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :return:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> data:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            app = &#123;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            app[<span class="string">'ID'</span>] = i.get(<span class="string">'appId'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            app[<span class="string">'应用名称'</span>] = i.get(<span class="string">'displayName'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            app[<span class="string">'下载链接'</span>] = self.base_download + str(i.get(<span class="string">'appId'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            self.queue.put(app)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self, page)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        parame = &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'page'</span>: page,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'categoryId'</span>: int(self.category),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'pageSize'</span>: <span class="number">30</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        req = requests.get(url=self.base_url, params=parame)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        req.encoding = req.apparent_encoding</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> req</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider_by_page</span><span class="params">(self, page, retry=<span class="number">3</span>)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        失败页数重新爬取</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param page: 失败页数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param retry: 重试次数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :return:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> retry &gt; <span class="number">0</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'重试第&#123;&#125;页'</span>.format(page))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            req = self.request(page=page)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data = req.json()[<span class="string">'data'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> data:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    self.clean_data(data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    print(<span class="string">'第&#123;&#125;页重试成功'</span>.format(page))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">except</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                self.spider_by_page(page=page, retry=retry - <span class="number">1</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">spider</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :param category: 模块id，如游戏：15</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        :return:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        fail_page = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(self.max_page):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'正在爬取第&#123;&#125;页'</span>.format(_))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            req = self.request(_)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data = req.json()[<span class="string">'data'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">except</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                data = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">                fail_page.append(_)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> data:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                self.clean_data(data)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">continue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> fail_page:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'出错的页数：'</span>, fail_page)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> fail_page:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                self.spider_by_page(page=_)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            print(<span class="string">'没有出错'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.spider()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        data_list = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> self.queue.empty():</span></pre></td></tr><tr><td class="code"><pre><span class="line">            data_list.append(self.queue.get())</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">with</span> open(<span class="string">'&#123;&#125;.csv'</span>.format(self.category), <span class="string">'w'</span>, newline=<span class="string">''</span>, encoding=<span class="string">'utf-8-sig'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            f_csv = csv.DictWriter(f, self.csv_header)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            f_csv.writeheader()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            f_csv.writerows(data_list)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        print(<span class="string">'文件保存成功,打开&#123;&#125;.csv查看'</span>.format(self.category))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = XiaoMiShop(<span class="number">15</span>).run()</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-Sqlalchemy中使用JSON字段</title>
    <url>/2019/12/23/Flask-Sqlalchemy%E4%B8%AD%E4%BD%BF%E7%94%A8JSON%E5%AD%97%E6%AE%B5/</url>
    <content><![CDATA[<p>Mysql从5.7版本后支持Json字段，本片文章记录Flask-Sqlalchemy如何对于Json字段进行增删改查操作</p>
<a id="more"></a>
<blockquote>
<p>项目中的字段无法确定，动态变化时使用。<br>也可以使用text、varchar来代替，但是text、varchar是不支持搜索的，并且不支持局部更新，只能更改全部字段，增加了i/o操作，不利于性能。</p>
</blockquote>
<p>定义一个<code>User</code>类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(db.Model)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    name= db.Column(db.String(<span class="number">32</span>), comment=<span class="string">'姓名'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    extra = db.Column(db.JSON, comment=<span class="string">'扩展字段'</span>)</span></pre></td></tr></table></figure>
<h3 id="0x01-添加数据"><a href="#0x01-添加数据" class="headerlink" title="0x01 添加数据"></a>0x01 添加数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = User(name = <span class="string">'张三'</span>, extra = dict(age=<span class="number">18</span>, gender = <span class="number">1</span>, weght = <span class="number">70</span>kg))) </span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.add(user)</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit()</span></pre></td></tr></table></figure>
<h3 id="0x02-更新Json数据"><a href="#0x02-更新Json数据" class="headerlink" title="0x02 更新Json数据"></a>0x02 更新Json数据</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.orm.attributes <span class="keyword">import</span> flag_modified </span></pre></td></tr><tr><td class="code"><pre><span class="line">user.extra.update(dict(birthday=<span class="number">1998</span><span class="number">-12</span><span class="number">-12</span>))) </span></pre></td></tr><tr><td class="code"><pre><span class="line">flag_modified(user, <span class="string">'extra'</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.add(user) </span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit()</span></pre></td></tr></table></figure>

<h3 id="0x03-删除Json字段"><a href="#0x03-删除Json字段" class="headerlink" title="0x03 删除Json字段"></a>0x03 删除Json字段</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user.extra.pop(<span class="string">'birthday'</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">flag_modified(user, <span class="string">'extra'</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.add(user) </span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit()</span></pre></td></tr></table></figure>
<h3 id="0x04-查询Json字段"><a href="#0x04-查询Json字段" class="headerlink" title="0x04 查询Json字段"></a>0x04 查询Json字段</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> cast, type_coerce</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> String, JSON</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 首先是针对单一数字、字符串时</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">User.query.filter(User.extra[<span class="string">'age'</span>] == <span class="number">18</span>, User.extra[<span class="string">'weght'</span>] == <span class="string">'70kg'</span>).first()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 另一种特殊情况时,查询条件是一个对象时： </span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 先增加一组数据： </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">user.extra.update(dict(info=dict(address=<span class="string">'北京市'</span>))) </span></pre></td></tr><tr><td class="code"><pre><span class="line">flag_modified(user, <span class="string">'extra'</span>) </span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit() </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 查询整个info时： </span></span></pre></td></tr><tr><td class="code"><pre><span class="line">User.query.filter(cast(User.extra[<span class="string">'info'</span>], String) == json.dumps(&#123;<span class="string">'address'</span>:<span class="string">'北京市'</span>&#125;)).first() </span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># or</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">User.query.filter(cast(User.extra[<span class="string">'info'</span>], String) == type_coerce(&#123;<span class="string">"address"</span>: <span class="string">"北京市"</span>&#125;, JSON)).first()</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Flask-Sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Clipboard插件使用</title>
    <url>/2019/12/23/clipboard%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在开发<a href="https://github.com/Joynice/PicGo_Web" target="_blank" rel="noopener">PicGo_Web</a>时，点击Copy，将绑定的url复制到粘贴板中。</p>
<a id="more"></a>

<p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/copy.JPG" alt="Copy"><br>找到各种插件，最后选择使用<code>Clipboard</code>来实现这个功能</p>
<blockquote>
<p><a href="https://www.bootcdn.cn/clipboard.js/" target="_blank" rel="noopener">CDN加速</a>，自行查看</p>
</blockquote>
<h3 id="0x01-引入Clipboard"><a href="#0x01-引入Clipboard" class="headerlink" title="0x01 引入Clipboard"></a>0x01 引入Clipboard</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://www.jq22.com/demo/clipboard.js-master201703170013/dist/clipboard.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>
<h3 id="0x02-指定内容"><a href="#0x02-指定内容" class="headerlink" title="0x02 指定内容"></a>0x02 指定内容</h3><p>使用<code>data-clipboard-text</code>指定copy内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"layui-btn layui-btn-xs layui-btn-radius layui-btn-warm copy"</span> <span class="attr">id</span>=<span class="string">"copy"</span> <span class="attr">data-clipboard-text</span>=<span class="string">"&#123;&#123; image.link &#125;&#125;"</span>&gt;</span>copy</span></pre></td></tr></table></figure>

<h3 id="0x03-绑定元素"><a href="#0x03-绑定元素" class="headerlink" title="0x03 绑定元素"></a>0x03 绑定元素</h3><p>当点击到<code>copy</code>类的时候进行拷贝操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;    <span class="comment">//copy链接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> clipboard = <span class="keyword">new</span> Clipboard(<span class="string">'.copy'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    clipboard.on(<span class="string">'success'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        layer.msg(<span class="string">"已拷贝到粘贴版"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    clipboard.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="built_in">console</span>.log(e);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>Clipboard</tag>
      </tags>
  </entry>
  <entry>
    <title>python操作github</title>
    <url>/2019/12/23/python%E6%93%8D%E4%BD%9Cgithub/</url>
    <content><![CDATA[<p>在写<a href="https://github.com/Joynice/PicGo_Web" target="_blank" rel="noopener">PicGo_Web</a>时，需要向Github上传图片和删除图片，这里记录下如何操作。</p>
<a id="more"></a>
<p>据我了解，能够操作Github的库有两个：</p>
<ul>
<li>PyGithub</li>
<li>GitPython</li>
</ul>
<p>前者通过Github Api进行操作操作，或者通过调用本地Git进行操作，各有优缺点，本次使用前者进行操作。</p>
<h3 id="0x01-配置"><a href="#0x01-配置" class="headerlink" title="0x01 配置"></a>0x01 配置</h3><p>使用<code>PyGithub</code>在实例<code>Github</code>类的时候需要验证github用户名和密码，或者验证Github Token，所以需要配置username, password 两个参数。</p>
<h3 id="0x02-上传图片"><a href="#0x02-上传图片" class="headerlink" title="0x02 上传图片"></a>0x02 上传图片</h3><p>上传文件需要指定上传远端的路径如(img/aaa.png)，commit信息，上传内容，以及上传分支,其中上传内容需要读取图片内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_file</span><span class="params">(self, filname, content)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    repo = self.__create_repo()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> isinstance(repo, str):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            repo.create_file(path=filname, message=<span class="string">'add &#123;&#125;'</span>.format(filname), content=content, branch=self.branch) <span class="comment">#上传路径,commit信息,上传内容,上传分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="number">1</span>, <span class="string">'https://raw.githubusercontent.com/&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;'</span>.format(self.username, self.repository, self.branch, filname)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, <span class="string">'添加失败'</span></span></pre></td></tr></table></figure>
<h3 id="0x03-删除图片"><a href="#0x03-删除图片" class="headerlink" title="0x03 删除图片"></a>0x03 删除图片</h3><p>删除图片时候需要现获取图片的<code>sha</code>值，再进行删除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_file</span><span class="params">(self, filename)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    repo = self.__create_repo()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> isinstance(repo, str):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="number">0</span>, repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        contents = repo.get_contents(filename)  <span class="comment">#获取文件内容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> contents:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            repo.delete_file(contents.path, <span class="string">"remove &#123;&#125;"</span>.format(filename), contents.sha, branch=self.branch)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="number">1</span>, <span class="string">'删除成功'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, <span class="string">'删除失败'</span></span></pre></td></tr></table></figure>
<h3 id="0x04-源代码"><a href="#0x04-源代码" class="headerlink" title="0x04 源代码"></a>0x04 源代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'Joynice'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> github <span class="keyword">import</span> Github</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GithubTools</span><span class="params">(Github)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    </span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, username=config.GITHUB_USERNAME, password=config.GITHUB_PASSWORD, repository=config.REPOSITORIES, path=config.PATH, branch=config.BRANCH)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.username = username</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.password = password</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.repository = repository</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.path = path</span></pre></td></tr><tr><td class="code"><pre><span class="line">        self.branch = branch</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Github.__init__(self, username, password)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__create_repo</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            repo = self.get_repo(<span class="string">'&#123;&#125;/&#123;&#125;'</span>.format(self.username, self.repository))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">except</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="string">'连接Github API失败，请重新测试'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create_file</span><span class="params">(self, filname, content)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        repo = self.__create_repo()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> isinstance(repo, str):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                repo.create_file(path=filname, message=<span class="string">'add &#123;&#125;'</span>.format(filname), content=content, branch=self.branch) <span class="comment">#上传路径,commit信息,上传内容,上传分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="number">1</span>, <span class="string">'https://raw.githubusercontent.com/&#123;&#125;/&#123;&#125;/&#123;&#125;/&#123;&#125;'</span>.format(self.username, self.repository, self.branch, filname)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="number">0</span>, <span class="string">'添加失败'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete_file</span><span class="params">(self, filename)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        repo = self.__create_repo()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> isinstance(repo, str):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> <span class="number">0</span>, repo</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            contents = repo.get_contents(filename)  <span class="comment">#获取文件内容</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> contents:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                repo.delete_file(contents.path, <span class="string">"remove &#123;&#125;"</span>.format(filename), contents.sha, branch=self.branch)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="number">1</span>, <span class="string">'删除成功'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="number">0</span>, <span class="string">'删除失败'</span></span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo_Web打造专属图床</title>
    <url>/2019/12/19/PicGo-Web%E6%89%93%E9%80%A0%E4%B8%93%E5%B1%9E%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>PicGo_Web打造专属图床</p>
<a id="more"></a>
<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>忙里抽闲写了这个图床工具，灵感来自于<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a>,在使用过程中发现这个工具的强大<br>于是模仿写了个<code>Web</code>端的工具，方便自己搭建一个简易的图床。</p>
<h2 id="应用说明"><a href="#应用说明" class="headerlink" title="应用说明"></a>应用说明</h2><p>PicGo_Web目前支持</p>
<ul>
<li>Github</li>
<li>个人服务器</li>
</ul>
<p><em>目前支持的方式比较少，但是也是最稳定的两个图床选择</em></p>
<p><code>Github</code>：虽然国内访问慢，但是可以保证图片存在的永久性，插个话“Github都准备把全球开源代码保存在北极，至少保存1000年，那<br>岂不是子子孙孙都能找到你当前上传的图片，哈哈”。这个图床的设计主要是方便那些没有个人服务器的小伙伴们，在github创建个仓库，就可以<br>作为图床，保存你上传的图片。</p>
<p><code>个人服务器</code>：如果你不满足于github的速度，你可以选择个人服务器，但是服务器到期的时候，图床也就失效了，个人还是觉得github还是不错的，<br>白嫖，嘻嘻</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/picweb.JPG" alt="界面"></p>
<p>本程序<code>Flask</code>框架开发，前端使用<code>layui</code>，对于没有美感的我，可以说前端设计真是对<code>layui</code>的侮辱。</p>
<p><strong>环境：python3.0+</strong></p>
<h4 id="安装步骤："><a href="#安装步骤：" class="headerlink" title="安装步骤："></a>安装步骤：</h4><p><strong>0x01 git clone</strong><br> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;Joynice&#x2F;PicGo_Web.git</span></pre></td></tr></table></figure></p>
<p><strong>0x02 安装依赖</strong></p>
<p>切到项目根目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span></pre></td></tr></table></figure>

<p><strong>0x03 数据库迁移</strong><br>切到项目根目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manages.py db init</span></pre></td></tr><tr><td class="code"><pre><span class="line">python manages.py db migrate</span></pre></td></tr><tr><td class="code"><pre><span class="line">python manages.py db upgrade</span></pre></td></tr></table></figure>

<p><strong>0x04 修改config中配置</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">STORE_TYPE = <span class="string">'github'</span> <span class="comment">#存储方式（github or server）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#github 配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">GITHUB_USERNAME = <span class="string">'xxx'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">GITHUB_PASSWORD = <span class="string">'xxx'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">REPOSITORIES = <span class="string">'xxx'</span>  <span class="comment">#需要提前创建，仓库名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">BRANCH = <span class="string">'master'</span> <span class="comment">#分支</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">PATH = <span class="string">'xxx'</span> <span class="comment"># 存储路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># server 配置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">LOCAL_STORAGE_PATH = os.path.join(os.getcwd(),<span class="string">'static'</span>,<span class="string">'images'</span>) <span class="comment">#默认存储到项目static/images文件夹下</span></span></pre></td></tr></table></figure>

<p><strong>0x05 运行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python run.py</span></pre></td></tr></table></figure>
<p>如果有bug，请及时issues，定会及时回复</p>
<blockquote>
<p>以上步骤可以启动程序，如果你想要高性能部署(gunicorn+nginx)，参照文章:<a href="http://lr.dropsec.xyz/2019/12/14/Gunicorn-Nginx%E9%83%A8%E7%BD%B2Flask%E9%A1%B9%E7%9B%AE/">Gunicorn+Nginx部署Flask项目</a></p>
</blockquote>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><p>如果你觉得这个工具，还可以，不妨赏点:</p>
<p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/wx.JPG" alt="微信"><br><img src="https://raw.githubusercontent.com/Joynice/image/master/img/zfb.JPG" alt="支付宝"></p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>记录Flask-Sqlalchemy使用过的查询</title>
    <url>/2019/12/16/%E8%AE%B0%E5%BD%95Flask-Sqlalchemy%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<p>在使用Flask开发的时候，用到Flask-Sqlalchemy进行数据库操作，<code>查</code>作为数据库操作重要的部分，查询语句的设计直接关系到网站性能，真实体验到<code>查</code>操作的重要性。</p>
<a id="more"></a>

<p>本片文章主要记录Flask-Sqlalchemy查询操作，也是开发工作中使用过的在此做个记录，先定义多对多的关系，方便举栗子，这是开发中的使用的例子，也可以理解成一般的多对多关系。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tags</span><span class="params">(db.Model)</span>:</span>  <span class="comment">#标签表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    漏洞的标签：id、名称、创建时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'t_tags'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name = db.Column(db.String(<span class="number">50</span>), nullable=<span class="literal">True</span>, comment=<span class="string">'漏洞标签名称'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    create_time = db.Column(db.DateTime, default=datetime.datetime.now, comment=<span class="string">'加入时间'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    vuls = db.relationship(<span class="string">'Vuls'</span>, secondary=vul_tag, backref=<span class="string">'tags'</span>)  <span class="comment"># 设置关系，通过中间表`t_vul_tag`实现</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vuls</span><span class="params">(db.Model)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    靶场漏洞库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'t_vuls'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>) <span class="comment">#uuid</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    name = db.Column(db.String(<span class="number">255</span>), nullable=<span class="literal">True</span>, comment=<span class="string">'漏洞名称'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    create_time = db.Column(db.DateTime, default=datetime.datetime.now, comment=<span class="string">'加入时间'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    vul_tag = db.Table(  <span class="comment">#中间表，表名`t_vul_tag`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'t_vul_tag'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.Column(<span class="string">'t_vul_id'</span>, db.Integer, db.ForeignKey(<span class="string">'t_vuls.id'</span>), primary_key=<span class="literal">True</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.Column(<span class="string">'t_tag_id'</span>, db.Integer, db.ForeignKey(<span class="string">'t_tags.id'</span>), primary_key=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure>

<h3 id="0x01-简单操作"><a href="#0x01-简单操作" class="headerlink" title="0x01 简单操作"></a>0x01 简单操作</h3><p><strong>普通查询</strong></p>
<ul>
<li>根据主键(id)获取某一标签  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = Tags.query.get(id)</span></pre></td></tr></table></figure></li>
<li>获取所有的标签  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tags = Tags.query.all()</span></pre></td></tr></table></figure></li>
<li>根据非主键获取某一标签(name)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = Tags.query.filter(Tags.name==<span class="string">'xxx'</span>).first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">tag = Tags.query.filter_by(name=<span class="string">'xxx'</span>).first()  <span class="comment">#另种写法</span></span></pre></td></tr></table></figure></li>
<li>根据创建时间倒序，获取所有标签(desc)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tags = Tags.query.order_by(Tags.create_time.desc())</span></pre></td></tr></table></figure></li>
<li>获取所有标签的数量(count)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = Tags.query.count()</span></pre></td></tr></table></figure></li>
<li>获取10个标签  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tags = Tags.query.limit(<span class="number">10</span>)</span></pre></td></tr></table></figure></li>
<li>切片查询，获取标签的1-10(多用于分页)(slice)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tags = Tags.query.slice(<span class="number">1</span>,<span class="number">11</span>)</span></pre></td></tr></table></figure></li>
<li>查询标签name中带有xxx的某一标签模糊查询(like)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = Tags.query.filter(Tags.name.like(<span class="string">"%xxx%"</span>)).first()</span></pre></td></tr></table></figure></li>
<li>查询标签name中包含xxx的某个标签(contains)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = Tags.query.filter(Tags.name.contains(<span class="string">'xxx'</span>)).first()</span></pre></td></tr></table></figure></li>
<li>查询标签name的小写等于xxx的标签(func.lower)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func </span></pre></td></tr><tr><td class="code"><pre><span class="line">tag = Tags.query.filter(func.lower(Tags.name)==<span class="string">'xxx'</span>).first()</span></pre></td></tr></table></figure></li>
<li>查询标签表name一列(with_entitles)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = Tags.query.with_entitles(Tags.name).all()</span></pre></td></tr></table></figure></li>
<li>查询标签表name一列去重(distinct)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = Tags.query.with_entitles(Tags.name).distinct().all()</span></pre></td></tr></table></figure></li>
<li>查询标签name以x开头的所有标签(startswith)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tags = Tags.query.filter(Tags.name.startswith(<span class="string">'x'</span>)).all()</span></pre></td></tr></table></figure></li>
</ul>
<p><strong>通过关系查询</strong></p>
<ul>
<li>查询标签name=xxx下所有的漏洞库  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vuls = Tags.query.filter_by(name=<span class="string">'xxx'</span>).vuls</span></pre></td></tr></table></figure></li>
<li>查询漏洞库name=xxx的所有标签  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tags = Vuls.query.filter_by(name=<span class="string">'xxx'</span>).tags</span></pre></td></tr></table></figure></li>
<li>将标签name=xxx，添加到name=yyy的漏洞库上  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tag = Tage.query.filter_by(name=<span class="string">'xxx'</span>).first()</span></pre></td></tr><tr><td class="code"><pre><span class="line">tags = Vuls.query.filter_by(name=<span class="string">'xxx'</span>).tags</span></pre></td></tr><tr><td class="code"><pre><span class="line">tags.append(tag)</span></pre></td></tr></table></figure>
<blockquote>
<p>其实多对多的操作，就是<code>list</code>操作，多的方面是一个列表，对应的增删改，及为列表的增删改</p>
</blockquote>
</li>
</ul>
<h3 id="0x02-进阶操作"><a href="#0x02-进阶操作" class="headerlink" title="0x02 进阶操作"></a>0x02 进阶操作</h3><p><strong>时间查询</strong></p>
<ul>
<li>查询指定创建日期的所有标签(extract)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> extract</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span></pre></td></tr><tr><td class="code"><pre><span class="line">today = date.today()</span></pre></td></tr><tr><td class="code"><pre><span class="line">tags = Tags.query.filter(extract(<span class="string">'year'</span>, Tags.create_time)==today.year,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        extract(<span class="string">'month'</span>, Tags.create_time)==today.month,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        extract(<span class="string">'day'</span>, Tags.create_time)==today.day).all()</span></pre></td></tr></table></figure></li>
<li>查询某个时间段之间的所有创建的标签(between)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> between</span></pre></td></tr><tr><td class="code"><pre><span class="line">tags = Tags.query.filter(Tags.create_time.between(<span class="string">'1990-01-01'</span>,<span class="string">'1990-01-02'</span>))</span></pre></td></tr></table></figure></li>
</ul>
<p><strong>多条件查询</strong></p>
<ul>
<li>查询name=xxx并且create_time=xxx的某个标签(and_)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span></pre></td></tr><tr><td class="code"><pre><span class="line">tags = Tags.query.filter(and_(Tags.name==<span class="string">'xxx'</span>, Tags.create_time==<span class="string">'xxx'</span>)).first()</span></pre></td></tr></table></figure></li>
<li>查询name=xxx或者create_time=xxx的某个标签(or_)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span></pre></td></tr><tr><td class="code"><pre><span class="line">tags = Tags.query.filter(or_(Tags.name==<span class="string">'xxx'</span>, Tags.create_time==<span class="string">'xxx'</span>)).first()</span></pre></td></tr></table></figure></li>
<li>查询标签name在[‘xxx’,’yyy’,’zzz’]列表中的所有(in_)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tags = Tags.query.filter(Tags.name.in_([<span class="string">'xxx'</span>,<span class="string">'yyy'</span>,<span class="string">'zzz'</span>])).all()</span></pre></td></tr></table></figure></li>
<li>查询标签name不是以x开头的所有标签(not_)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> not_</span></pre></td></tr><tr><td class="code"><pre><span class="line">tags = Tags.query.filter(not_(Tags.name.startswith(<span class="string">'x'</span>))).all()</span></pre></td></tr></table></figure></li>
</ul>
<p><strong>工作中遇到的</strong></p>
<ul>
<li>在开发观星资产中，不定查询条件(text)  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> text</span></pre></td></tr><tr><td class="code"><pre><span class="line">dict = request.args.to_dict()</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> dict.items():</span></pre></td></tr><tr><td class="code"><pre><span class="line">    asert_obj = asert_obj.filter(text(<span class="string">"%s = '%s'"</span> % (k, v)))</span></pre></td></tr></table></figure>
<h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3>进记录下使用过的查询，以后会继续更新在工作中用到的查询。</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Flask-Sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Python生成验证码</title>
    <url>/2019/12/16/Python%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
    <content><![CDATA[<p>在开发中许多地方要用到验证码，验证码的一般限制用户进行表单提交的时候进行爆破，这篇文章记录Python如何生成验证码。</p>
<a id="more"></a>
<p>验证码的生成主要注意到这几点</p>
<ul>
<li>验证码的宽高</li>
<li>验证码字体</li>
<li>验证码内容</li>
<li>干扰线</li>
<li>噪点</li>
</ul>
<p>满足这几点就可以生成一张验证码，下面代码是我之前学习Flask，copy别人的代码，之前都在用这串代码实现验证码功能,这里记录下，方便以后copy。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># Image：一个画布</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># ImageDraw：一个画笔</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># ImageFont:画笔的字体</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont, ImageFilter</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># pip install pillow</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># Captcha验证码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Captcha</span><span class="params">(object)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 生成几位数的验证码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    number = <span class="number">4</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 验证码图片的宽度和高度</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    size = (<span class="number">100</span>, <span class="number">30</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 验证码字体大小</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    fontsize = <span class="number">25</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 加入干扰线的条数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    line_number = <span class="number">2</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 构建一个验证码源文本</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    SOURCE = list()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        SOURCE.append(str(index))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 用来绘制干扰线</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @classmethod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gene_line</span><span class="params">(cls, draw, width, height)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        begin = (random.randint(<span class="number">0</span>, width), random.randint(<span class="number">0</span>, height))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        end = (random.randint(<span class="number">0</span>, width), random.randint(<span class="number">0</span>, height))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        draw.line([begin, end], fill=cls.__gene_random_color(), width=<span class="number">2</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 用来绘制干扰点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @classmethod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gene_points</span><span class="params">(cls, draw, point_chance, width, height)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        chance = min(<span class="number">100</span>, max(<span class="number">0</span>, int(point_chance)))  <span class="comment"># 大小限制在[0, 100]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> range(width):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> h <span class="keyword">in</span> range(height):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                tmp = random.randint(<span class="number">0</span>, <span class="number">100</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> tmp &gt; <span class="number">100</span> - chance:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    draw.point((w, h), fill=cls.__gene_random_color())</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 生成随机的颜色</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @classmethod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gene_random_color</span><span class="params">(cls, start=<span class="number">0</span>, end=<span class="number">255</span>)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        random.seed()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> (random.randint(start, end), random.randint(start, end), random.randint(start, end))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 随机选择一个字体</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @classmethod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gene_random_font</span><span class="params">(cls)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        fonts = [</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="string">'verdana.ttf'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        ]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        font = random.choice(fonts)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">'utils/captcha/'</span> + font</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 用来随机生成一个字符串(包括英文和数字)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @classmethod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gene_text</span><span class="params">(cls, number)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># number是生成验证码的位数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(random.sample(cls.SOURCE, number))</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># 生成验证码</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">    @classmethod</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gene_graph_captcha</span><span class="params">(cls)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 验证码图片的宽和高</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        width, height = cls.size</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 创建图片</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># R：Red（红色）0-255</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># G：G（绿色）0-255</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># B：B（蓝色）0-255</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># A：Alpha（透明度）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        image = Image.new(<span class="string">'RGBA'</span>, (width, height), cls.__gene_random_color(<span class="number">0</span>, <span class="number">100</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 验证码的字体</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        font = ImageFont.truetype(cls.__gene_random_font(), cls.fontsize)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 创建画笔</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        draw = ImageDraw.Draw(image)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 生成字符串</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        text = cls.gene_text(cls.number)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 获取字体的尺寸</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        font_width, font_height = font.getsize(text)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 填充字符串</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        draw.text(((width - font_width) / <span class="number">2</span>, (height - font_height) / <span class="number">2</span>), text, font=font,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                  fill=cls.__gene_random_color(<span class="number">150</span>, <span class="number">255</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 绘制干扰线</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, cls.line_number):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            cls.__gene_line(draw, width, height)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># 绘制噪点</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        cls.__gene_points(draw, <span class="number">10</span>, width, height)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># image.filter(ImageFilter.EDGE_ENHANCE_MORE)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> (text, image)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>验证码</tag>
      </tags>
  </entry>
  <entry>
    <title>requests内容编码问题</title>
    <url>/2019/12/14/requests%E5%86%85%E5%AE%B9%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在requests获取html内容的时候，由于页面编码格式的问题，有时候会出出现乱码的问题，这里记录下统一的解决方法。</p>
<a id="more"></a>

<blockquote>
<p>先写一段获取百度首页的代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line">req = requests.get(<span class="string">'https://www.baidu.com'</span>).text()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(req)</span></pre></td></tr></table></figure>

<p>这段代码执行后，后获取百度首页的html代码，但是有些网站获取html代码就可能不那么轻松了，可能就会出现编码问题，也不演示这么多，大多说html的编码是<code>utf-8</code>,但是不排除其他编码方式的存在，为了解决这个问题，让指定正确的编码方式，<code>requests</code>中封装了获取页面编码方式的方法。以后获取页面源码的时候可以这样写，增加代码的健壮性。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line">req = requests.get(<span class="string">'https://www.baidu.com'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> req.status_code == <span class="number">200</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    req.encoding = req.apparent_encoding</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(req.text())</span></pre></td></tr></table></figure>
<p>通过添加设置<code>apparent_encoding</code>，调用chardet.detect()来识别文本编码，可以实现自动编码。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Requests</tag>
      </tags>
  </entry>
  <entry>
    <title>Boss直聘爬虫新思路</title>
    <url>/2019/12/14/Boss%E7%9B%B4%E8%81%98%E7%88%AC%E8%99%AB%E6%96%B0%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p>之前写了一个爬虫项目，关于获取各大求职平台的数据，具体哪些平台就不列举了，感兴趣的话可以访问<a href="https://github.com/Joynice/FindJob" target="_blank" rel="noopener">Findjob</a>，时隔几个月后，突然有人<code>issues</code>说boss直聘不能爬了，本片文章记录如何解决反反爬虫。</p>
<a id="more"></a>

<h3 id="0x01-问题排查"><a href="#0x01-问题排查" class="headerlink" title="0x01 问题排查"></a>0x01 问题排查</h3><p>收到issues后，我将以前的项目拉下，发现Boss直聘真的运行不了了，然后查看当初拼接的查询链接的html，返回是一个跳转页面，不没有返回结果页面，通过判断某些参数，返回跳转页来隔离爬虫，最后发现<code>cookie</code>多了个<code>__zp_stoken__</code>字段这个可能就是限制是否跳转的重要参数，通过copy这个参数加在情头求头的cookie中可以正常访问，然后我就百度boss直聘的<code>__zp_stoken__</code>，听那些大佬说，这个参数是三千行js生成的，而且每天加密方式都会变化，我这还玩个毛线啊，果断放弃这条思路，这是<a href="https://blog.csdn.net/Lock_Jun/article/details/101768531" target="_blank" rel="noopener">文章链接</a>，还有这个参数的存活也是有限制的，有人说可以使用5次，也有人说可以使用几分钟，但是我一次就gg了。<br><img src="https://raw.githubusercontent.com/Joynice/image/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20191214165430.png" alt="cookie"></p>
<h3 id="0x02-解决方法"><a href="#0x02-解决方法" class="headerlink" title="0x02 解决方法"></a>0x02 解决方法</h3><ol>
<li><p>解密js获取token<br>对于我来说，比登天还难，js大佬可以调试试试</p>
</li>
<li><p>模拟浏览器<br>这种方法应该可以，但是我没尝试，因为浏览器会自动运行那段加密js，从而生成token进行验证，但是模拟浏览器太慢了，还是放弃了。</p>
</li>
<li><p>寻找其他接口<br>终于在不经意间发现了boss直聘的手机端接口，一开始发现请求的cookie中还是有token字段，准备放弃，但是还是用postman测试了下可以获得数据，nice。而且也解决了web端只能获取前十页数据限制，目前测试没有任何验证。</p>
</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.zhipin.com<span class="regexp">/mobile/</span>jobs.json?city=<span class="number">101280600</span>&amp;query=java&amp;page=<span class="number">27</span></span></pre></td></tr></table></figure>
<p>不久之后我会将这个方法更新到项目中</p>
<h3 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h3><p>有时候成功可能就在不经意之间….</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Gunicorn+Nginx部署Flask项目</title>
    <url>/2019/12/14/Gunicorn-Nginx%E9%83%A8%E7%BD%B2Flask%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>最近上线了<a href="http://wechat.doonsec.com" target="_blank" rel="noopener">洞见微信聚合平台</a>需要部署，以前部署项目使用的<code>uwsgi</code>+<code>nginx</code>，听说<code>gunicorn</code>使用起来挺方便的，记录下部署过程。<a id="more"></a></p>
<p>生产环境不比开发环境，要适应性能强大的<code>应用服务器</code>和<code>web服务器</code>,在开发环境中，使用Flask自带的<code>wsgi</code>不能满足生产环境的需求，需要满足高性能的要求。这里不得不说，<code>1核2g</code>的阿里云服务器配置三个web项目，每天将近500的访问量不带卡的。不吹牛批了，开始正式记录。</p>
<h3 id="0X01-Flask配置"><a href="#0X01-Flask配置" class="headerlink" title="0X01 Flask配置"></a>0X01 Flask配置</h3><p>其实Flask配置没有什么好说的，需要将<code>debug</code>改为<code>True</code></p>
<h3 id="0x02-Gunicorn配置"><a href="#0x02-Gunicorn配置" class="headerlink" title="0x02 Gunicorn配置"></a>0x02 Gunicorn配置</h3><p>首先安装Gunicorn</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> gunicorn</span></pre></td></tr></table></figure>

<p>Gunicorn配置也非常方便，这里记录下常用的一条配置命令</p>
<p>在app.py同级目录下运行</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">gunicorn -b <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> -p <span class="number">5000</span> -w <span class="number">10</span> -k gevent -D app:app</span></pre></td></tr></table></figure>
<p> <strong>-b：</strong> 绑定IP<br> <strong>-p:</strong> 绑定端口<br> <strong>-w：</strong> worke数量<br> <strong>-k：</strong> 运行模式<br> <strong>-D：</strong> 开启守护进程<br> <strong>app:app：</strong> 启动文件下的app实例</p>
<h3 id="0x03-ngixn配置"><a href="#0x03-ngixn配置" class="headerlink" title="0x03 ngixn配置"></a>0x03 ngixn配置</h3><p>nginx配置需要将gunicorn绑定的端口进行消息转发就可以了</p>
<figure class="highlight tp"><table><tr><td class="code"><pre><span class="line">server &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        listen xx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        server_name xxx;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        location / &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">                proxy_pass http:<span class="comment">//127.0.0.1:5000;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                proxy_set_header Host <span class="variable">$host</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                proxy_set_header <span class="keyword">X</span>-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                proxy_set_header <span class="keyword">X</span>-Real-IP <span class="variable">$remote_addr</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                proxy_set_header REMOTE-HOST <span class="variable">$remote_addr</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                proxy_set_header referer <span class="variable">$http_referer</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">`</span></pre></td></tr></table></figure>
<p>同时记录下nginx的几条配置命令</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">nginx -t <span class="string">//</span>检查配置文件是否合法</span></pre></td></tr><tr><td class="code"><pre><span class="line">nginx -s <span class="keyword">reload</span> <span class="string">//</span>重启nginx</span></pre></td></tr></table></figure>

<p>```</p>
]]></content>
      <categories>
        <category>部署</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>部署</tag>
      </tags>
  </entry>
  <entry>
    <title>Jinja2自定义过滤器</title>
    <url>/2019/12/12/Jinja2%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<p><code>Jinja2</code>本身自带许多过滤器，但是有些功能实现需要自己设计特定的过滤器，我熟悉的有两种实现的方法，这里记录经常使用的一种方法。</p>
<a id="more"></a>

<blockquote>
<p>以难度判断记录下，通过判断1-5，返回不同的难度等级</p>
</blockquote>
<p>过滤函数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Num2Nandu</span><span class="params">(num)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(num, int):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">'暂无'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> num == <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">'入门'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">elif</span> num == <span class="number">2</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">'初级'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">elif</span>  <span class="number">2</span>&lt;num&lt;=<span class="number">4</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">'中级'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">elif</span> num == <span class="number">5</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">'高级'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="string">'暂无'</span></span></pre></td></tr></table></figure>

<p>将过滤函数添加到模板过滤器中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bp.add_app_template_filter(Num2Nandu, <span class="string">'Num2Nandu'</span>)  <span class="comment">#过滤数字-难度，第二个参数为过滤器的名字</span></span></pre></td></tr></table></figure>

<p>前端使用自定义的过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"Ori-pic"</span>&gt;</span>&#123;&#123; vul.stars|Num2Nandu &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  <span class="comment">&lt;!--传入int进行过滤---&gt;</span></span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Jinja2</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask-Sqlalchemy简单使用</title>
    <url>/2019/12/11/Flask-Sqlalchemy%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在开发过程中需要借助数据库来存储相关信息，在关系型数据库中可能就需要关系来处理事物之间的逻辑，而<code>Flask</code>中的<code>Flask-Sqlalchemy</code>使用<code>orm</code>来实现对象关系映射，这个对于不熟悉原生sql语句的开发者来说，真是福音。本片文章主要记录一些简单的操作。</p>
<a id="more"></a>

<p>开发漏洞靶场的时候，使用重新记录下相关操作，从数据库配置、数据库模型设计以及迁移、数据增删改查等方面记录整个流程。</p>
<h3 id="0X01-数据库配置"><a href="#0X01-数据库配置" class="headerlink" title="0X01 数据库配置"></a>0X01 数据库配置</h3><blockquote>
<p>在开发这套系统的时候，使用的<code>mysql</code>数据库，而<code>Flask-Sqlalchemy</code>支持多种关系型数据库。</p>
</blockquote>
<p>这里记录下使用<code>Flask-Sqlalchemy</code>配合<code>mysql</code>相关配置</p>
<p>简单Flask项目，我习惯的文件结构如下：<br><img src="https://raw.githubusercontent.com/Joynice/image/master/img/%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.JPG" alt="文件结构"></p>
<p>下面所写的文件基本按照此文件结构，这是一个简单的项目：<a href="https://github.com/Joynice/shicimingju" target="_blank" rel="noopener">诗词名句网获取展示</a> 有兴趣可以踩踩</p>
<p><strong>config.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql设置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span></pre></td></tr><tr><td class="code"><pre><span class="line">MYSQL_HOST = <span class="string">'xxx'</span> <span class="comment">#host</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MYSQL_PORT = <span class="number">3306</span>  <span class="comment">#port</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MYSQL_DATABASE = <span class="string">'xxx'</span>  <span class="comment">#db_name</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MYSQL_USERNAME = <span class="string">'xxx'</span>  <span class="comment">#db_username</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MYSQL_PASSWORD = <span class="string">'xxx'</span>  <span class="comment">#db_password</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">SQLALCHEMY_DATABASE_URI = <span class="string">'mysql+pymysql://&#123;&#125;:&#123;&#125;@&#123;&#125;:&#123;&#125;/&#123;&#125;?charset=utf8'</span>.format(MYSQL_USERNAME, MYSQL_PASSWORD,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                                                MYSQL_HOST, MYSQL_PORT,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                                                                MYSQL_DATABASE)</span></pre></td></tr><tr><td class="code"><pre><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span>  <span class="comment">#是否追踪对象的修改</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">SQLALCHEMY_COMMIT_ON_TEARDOWN = <span class="literal">False</span> <span class="comment">#每次请求结束后都会自动提交数据库中的变动</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">SQLALCHEMY_POOL_SIZE = <span class="number">100</span>   <span class="comment">#数据库连接池的大小。默认是引擎默认值（通常 是 5 ）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">SQLALCHEMY_MAX_OVERFLOW = <span class="number">20</span>  <span class="comment">#控制连接池达到最大大小后还可以创建的连接数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">SQLALCHEMY_ECHO = <span class="literal">False</span>  <span class="comment">#是否输出stderr的语句</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">SQLALCHEMY_POOL_RECYCLE = <span class="number">90</span>  <span class="comment">#多少秒后自动回收连接</span></span></pre></td></tr></table></figure>
<p>上面基本上涵盖了所有关于<code>Flask-Sqlalchemy</code>的配置，下面就需要将<code>Flask-Sqlalchemy</code>初始化app。这部分，我的习惯创建<code>exts.py</code>进行<code>SQLAlchemy</code>类的实例,这样会解决循环导入的问题</p>
<p><strong>exts.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span></pre></td></tr><tr><td class="code"><pre><span class="line">db = SQLAlchemy()</span></pre></td></tr></table></figure>
<p>然后在<code>app.py</code>中在导入<code>db</code>进行初始化app</p>
<p><strong>app.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.init_app(app)</span></pre></td></tr></table></figure>
<p>这样就基本完了相关配置,这里的代码只是其中核心部分</p>
<h3 id="0x02-数据库模型设计以及迁移"><a href="#0x02-数据库模型设计以及迁移" class="headerlink" title="0x02 数据库模型设计以及迁移"></a>0x02 数据库模型设计以及迁移</h3><p>因为作为简单的例子，不必要的字段就不进行写了，在设计多对多的关系时，我的习惯就是创建中间表进行关联,这里展示模型设计。<br><strong>models.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tags</span><span class="params">(db.Model)</span>:</span>  <span class="comment">#标签表</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    漏洞的标签：id、名称、创建时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'t_tags'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    name = db.Column(db.String(<span class="number">50</span>), nullable=<span class="literal">True</span>, comment=<span class="string">'漏洞标签名称'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    create_time = db.Column(db.DateTime, default=datetime.datetime.now, comment=<span class="string">'加入时间'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    vuls = db.relationship(<span class="string">'Vuls'</span>, secondary=vul_tag, backref=<span class="string">'tags'</span>)  <span class="comment"># 设置关系，通过中间表`t_vul_tag`实现</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vuls</span><span class="params">(db.Model)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    靶场漏洞库</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    __tablename__ = <span class="string">'t_vuls'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>) <span class="comment">#uuid</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    name = db.Column(db.String(<span class="number">255</span>), nullable=<span class="literal">True</span>, comment=<span class="string">'漏洞名称'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    create_time = db.Column(db.DateTime, default=datetime.datetime.now, comment=<span class="string">'加入时间'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    vul_tag = db.Table(  <span class="comment">#中间表，表名`t_vul_tag`</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'t_vul_tag'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.Column(<span class="string">'t_vul_id'</span>, db.Integer, db.ForeignKey(<span class="string">'t_vuls.id'</span>), primary_key=<span class="literal">True</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.Column(<span class="string">'t_tag_id'</span>, db.Integer, db.ForeignKey(<span class="string">'t_tags.id'</span>), primary_key=<span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">)</span></pre></td></tr></table></figure>

<p>这样就可以实现题目和标签之间多对多的关系。</p>
<p>模型设计好了，就需要映射到数据库中实实在在的表了,通常习惯创建<code>manages.py</code>文件来写些方便的操作和进行数据库迁移，这里仅进行记录如何进行数据库迁移。</p>
<p><strong>manages.py</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'Joynice'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> apps.admin.models <span class="keyword">import</span> Upload_Log</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> create_app</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">app = create_app()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">manager = Manager(app)</span></pre></td></tr><tr><td class="code"><pre><span class="line">Migrate(app, db)</span></pre></td></tr><tr><td class="code"><pre><span class="line">manager.add_command(<span class="string">'db'</span>, MigrateCommand)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    manager.run()</span></pre></td></tr></table></figure>
<p>基本上就这样写就可以，<br>然后运行以下命令进行数据库的迁移</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">python manages.py db init  #初始化</span></pre></td></tr><tr><td class="code"><pre><span class="line">python manages.py db migrate  #迁移</span></pre></td></tr><tr><td class="code"><pre><span class="line">python manages.py db<span class="built_in"> upgrade </span> #生成</span></pre></td></tr></table></figure>
<p>运行完上述命令后，就会在数据库中生成三个表,就可以继续下面的操作了。</p>
<h3 id="0x03-数据库增删改查"><a href="#0x03-数据库增删改查" class="headerlink" title="0x03 数据库增删改查"></a>0x03 数据库增删改查</h3><p>使用<code>Flask-Sqlalchemy</code>进行增删改查非常的方便，不需要设计原生的sql语句，只需要对模型操作就可以了，以题目-标签为例子，进行增删改查操作。</p>
<ul>
<li>增<ul>
<li>增加标签  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Tags</span></pre></td></tr><tr><td class="code"><pre><span class="line">tag = Tags(name=<span class="string">'xxx'</span>, create_time=<span class="string">'xxx'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.add(tag)</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit()</span></pre></td></tr></table></figure></li>
<li>添加题目  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Vuls</span></pre></td></tr><tr><td class="code"><pre><span class="line">vul = Vuls(name=<span class="string">'xxx'</span>, create_time=<span class="string">'xxx'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.add(vul)</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit()</span></pre></td></tr></table></figure></li>
</ul>
</li>
<li>删<br>  删除标签(id为1)：删除标签的时候多先进行查询再进行删除  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Tags</span></pre></td></tr><tr><td class="code"><pre><span class="line">tag = Tags.query.get(<span class="number">1</span>) <span class="comment">#这种查询方法只是试用对`主键`查询</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.delete(tag)</span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit()</span></pre></td></tr></table></figure></li>
<li>改<br>  更改标签name=’ceshi’:修改操作也多在查询之后进行，这里也对id=1的数据修改  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Tags</span></pre></td></tr><tr><td class="code"><pre><span class="line">tag = Tags.query.get(<span class="number">1</span>) <span class="comment">#这种查询方法只是试用对`主键`查询</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">tag.name = <span class="string">'ceshi'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit()</span></pre></td></tr></table></figure></li>
<li>查<br>  查的话上面操作已经有体现了</li>
</ul>
<p>这片文章仅记录下简单的<code>Flask-Sqlalchemy</code>的流程，以后会对更新一些文章关于<code>Flask-Sqlalchemy</code>的进阶操作，比如关系操作、复杂查询等等。</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Flask-Sqlalchemy</tag>
      </tags>
  </entry>
  <entry>
    <title>Layui评分模块使用</title>
    <url>/2019/12/11/Layui%E8%AF%84%E5%88%86%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>在漏洞靶场的开发中，使用Layui的<code>rate</code>评分模块来对每个漏洞进行难度评分，默认值1-5，分别代替这不同的难度，简单的使用<code>rate</code>可以看看官方文档就可以实现，但是这次在table和form中实现取值和赋值操作，记录下以供以后参考。<a id="more"></a></p>
<h3 id="0x01-table中进行初始化赋值"><a href="#0x01-table中进行初始化赋值" class="headerlink" title="0x01 table中进行初始化赋值"></a>0x01 table中进行初始化赋值</h3><p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/%E9%9A%BE%E5%BA%A6.JPG" alt="难度赋值"></p>
<p>在对table中的星星进行赋值的时候，并没有找到好的方法，因为文档上给的方法，都是值指定元素进行渲染，而我只有数据，并没有指定的元素，而且我要对所有题目进行赋值，最终想到了一个方法解决。在table赋值的时候，然后有每个题目特征的div，在table加载成功后调用<code>done</code>函数对div进行渲染。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">, &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    field: <span class="string">'stars'</span>, <span class="attr">title</span>: <span class="string">'难度'</span>, <span class="attr">width</span>: <span class="number">170</span>, <span class="attr">templet</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> <span class="string">'&lt;div id="avgScore'</span> + res.id + <span class="string">'"&gt;&lt;/div&gt;'</span>   <span class="comment">//返回id以'avgScore'开头，以题目id结尾的div</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<p>上述代码，就是返回带有题目特征的div</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">done: <span class="function"><span class="keyword">function</span> (<span class="params">res, curr, count</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> data = res.data;<span class="comment">//返回的json中data数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> data) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rate.render(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            elem: <span class="string">'#avgScore'</span> + data[item].id + <span class="string">''</span>         <span class="comment">//绑定元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            , <span class="attr">length</span>: <span class="number">5</span>            <span class="comment">//星星个数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            , <span class="attr">value</span>: data[item].stars             <span class="comment">//初始化值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            , <span class="attr">readonly</span>: <span class="literal">true</span>      <span class="comment">//只读</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>上述代码，就是对table中的所有特征div进行渲染,将<code>readonly:true</code>只读，不能设置。</p>
<p>但是现实的样式并不美，星星并不上下居中,修改样式如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.layui-rate</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">4&#125;</span></pre></td></tr></table></figure>

<h3 id="0x02-form中进行初始化赋值"><a href="#0x02-form中进行初始化赋值" class="headerlink" title="0x02 form中进行初始化赋值"></a>0x02 form中进行初始化赋值</h3><p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/%E8%B5%8B%E5%80%BC.JPG" alt="from中进行赋值"></p>
<p>在进行题目编辑的时候使用form表单展示，这里需要将值赋值给form中的元素，这里的赋值就是简单的官方提供的<code>rate</code>赋值,在form弹出成功的<code>success</code>回调函数中进行初始化赋值:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>题目难度<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-block"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"rate"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    rate.render(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        elem: <span class="string">'#rate'</span>    <span class="comment">//绑定元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            , <span class="attr">length</span>: <span class="number">5</span>     <span class="comment">//星星个数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            , <span class="attr">value</span>: data.stars     <span class="comment">//初始化值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">4&#125;</span></pre></td></tr></table></figure>

<h3 id="0x03-form中设置并取值"><a href="#0x03-form中设置并取值" class="headerlink" title="0x03 form中设置并取值"></a>0x03 form中设置并取值</h3><p>这里的话就需要，重新设置难度值，通过提交按钮，获取用户设置的值，传递给后端。</p>
<p><code>rate</code>模块中只有点击产生的回调，并没有点击按钮后的回调，这部分需要自己取值。</p>
<p>设置值非常简单，只需要将<code>readonly:true</code>设置为false，就可以进行赋值，取值的过程实现有点坎坷，最后通过这个方法解决：星星亮起来后，会有个添加<code>layui-icon-rate-solid</code>的class，所以只需要获取这class的个数，就可以获得用户设置的值了。还是出现一个问题，就是应为页面的table中有好多的亮起的星星，如果直接获取的话，就是整个页面的值，并不是指定题目的难度系数，所以需要获取弹窗中<code>layui-icon-rate-solid</code>的个数，最后获取代码如下:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> star = $(<span class="string">".layui-layer .layui-icon-rate-solid"</span>).length; <span class="comment">//获取当前弹窗的题目的star数,方法：获取layui-icon-rate-solid类的个数。</span></span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Layui</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask中使用celery实现异步操作</title>
    <url>/2019/12/10/Flask%E4%B8%AD%E4%BD%BF%E7%94%A8celery%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Flask自身并没有异步功能，但是后端遇到些超时操作，前端只能等待，那么Celery就可以实现异步操作，满足开发中的需求。</p>
<a id="more"></a>

<h3 id="0x01-Celery"><a href="#0x01-Celery" class="headerlink" title="0x01 Celery"></a>0x01 Celery</h3><p>Celery是一个简单、灵活而且可靠的，能够处理大量消息的分布式系统，并且提供维护这样一个系统的必要工具，Celery支持使用任务队列的方式在分布的机器、进程、线程上执行任务调度。</p>
<p>Celery的架构有消息中间件（message broker），执行任务单元（worker）和任务执行结果存储（task result store）三个部分组成。</p>
<ol>
<li><p>消息中间件<br>Celery本身不提供消息服务，但是可以方便和第三方提供的消息中间件集成。包括RabbitMQ、Redis等等</p>
</li>
<li><p>执行任务单元<br>Worker是Celery提供的认为执行单元，worker并发运行在分布式的系统节点中。</p>
</li>
<li><p>任务结果存储<br>Task result store用来存储Worker执行的任务结果，Celery支持不同方式存储任务结果，包括AMQP、Redis等等。<br>Celery统筹三个单元，相互合作完成任务，充分运用了生产者消费者模型，而Wokers可以分布式部署，增加代码执行效率。用户下发任务到消息队列中，而Worker不断监视消息队列的状况，一单任务下发，Worker获得任务，开始工作，完后工作后在把返回的结果存入任务结果存储单元中。</p>
</li>
</ol>
<p>Celery可以配置参数协调任务队列进行任务调度，支持及时任务以及定时任务，自身可以解决任务逻辑，减少程序开销，加快项目开发。</p>
<h3 id="0x02-Flask中使用Celery"><a href="#0x02-Flask中使用Celery" class="headerlink" title="0x02 Flask中使用Celery"></a>0x02 Flask中使用Celery</h3><p>在Flask中就可以把耗时任务交给Celery，这样可以优化前端用户体验，就给用户发送邮件功能而说，这就是一个耗时任务，如果不使用Celery的话，同步实现发邮件，前台用户在点击获取邮件后，会在3-4秒后页面才会弹窗，发送邮件成功，这个是个同步运行过程，用户体验不好，并且在这3-4秒钟内，并不知道是否执行发送邮件的命令。使用Celery就不同了，用户点击发送邮件按钮后，会把任务交给Celery来完成，并不需要等待发送邮件的过程。</p>
<h3 id="0x03-实例"><a href="#0x03-实例" class="headerlink" title="0x03 实例"></a>0x03 实例</h3><p>说了这么多，很多人还说<code>not give me bb, show me in code</code>，好的，我就发送邮件功能给出个栗子。</p>
<ul>
<li>Celery_Example<ul>
<li>config.py</li>
<li>tasks.py</li>
<li>view.py</li>
</ul>
</li>
</ul>
<p>简单的文件结构</p>
<p><strong>config.py：主要写些邮件和Celery的配置文件</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 发送者邮箱的服务器地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MAIL_SERVER = <span class="string">"smtp.qq.com"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MAIL_PORT = <span class="string">'587'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MAIL_USE_TLS = <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># MAIL_USE_SSL</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MAIL_USERNAME = <span class="string">'xxxx@qq.com'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MAIL_PASSWORD = <span class="string">'xxxx'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">MAIL_DEFAULT_SENDER = <span class="string">'xxxx@qq.com'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">#celery相关的配置, 中间件使用redis</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://xxxx:6379/x'</span>  <span class="comment">#任务结果存储</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">CELERY_BROKER_URL = <span class="string">'redis://xxxx:6379/x'</span>  <span class="comment">#消息存储</span></span></pre></td></tr></table></figure>

<p><strong>tasks.py: 创建Celery实例绑定app并创建发送邮件任务</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'Joynice'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message, Mail</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> config</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">app = Flask(__name__)</span></pre></td></tr><tr><td class="code"><pre><span class="line">app.config.from_object(config)</span></pre></td></tr><tr><td class="code"><pre><span class="line">mail = Mail()</span></pre></td></tr><tr><td class="code"><pre><span class="line">mail.init_app(app)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_celery</span><span class="params">(app)</span>:</span>   <span class="comment"># 创建Celery</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    celery = Celery(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        app.import_name,</span></pre></td></tr><tr><td class="code"><pre><span class="line">        backend=app.config[<span class="string">'CELERY_RESULT_BACKEND'</span>],</span></pre></td></tr><tr><td class="code"><pre><span class="line">        broker=app.config[<span class="string">'CELERY_BROKER_URL'</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    celery.conf.update(app.config)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ContextTask</span><span class="params">(celery.Task)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">with</span> app.app_context():</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> self.run(*args, **kwargs)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    celery.Task = ContextTask</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> celery</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">celery = make_celery(app)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@celery.task    #创建发送邮件任务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(subject, recipients, body)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    message = Message(subject=subject, recipients=recipients, body=body)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    mail.send(message)</span></pre></td></tr></table></figure>

<p><strong>view.py: 在视图函数中使用发送邮件功能</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tasks <span class="keyword">import</span> send_mail</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@bp.route('/email_captcha/')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">email_captcha</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    email = request.args.get(<span class="string">'email'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(email)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> email:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> restful.params_error(<span class="string">'请传递邮箱参数！'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    source = list(string.ascii_letters)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    source.extend(map(<span class="keyword">lambda</span> x: str(x), range(<span class="number">0</span>, <span class="number">10</span>)))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    captcha = <span class="string">""</span>.join(random.sample(source, <span class="number">6</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">    send_mail.delay(<span class="string">'BBS论坛邮箱验证码'</span>, [email], <span class="string">'您的验证码是：&#123;&#125;'</span>.format(captcha))  <span class="comment">#Celery处理发送邮件任务</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    zlcache.set(email, captcha)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> restful.success()</span></pre></td></tr></table></figure>

<hr>
<p>这三部分是功能实现的核心，同时Celery运行命名并不是跟着<code>app.run()</code>运行的，要单独运行:</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">celery</span> 启动命令:<span class="variable">celery</span> -<span class="variable">A</span> <span class="variable"><span class="class">tasks</span>.celery</span> <span class="variable">worker</span> --<span class="variable">pool</span>=<span class="variable">eventlet</span>， 启动时保证与<span class="variable"><span class="class">tasks</span>.py</span>同级</span></pre></td></tr></table></figure>
<p>同时记录下遇到的一个坑：</p>
<figure class="highlight ocaml"><table><tr><td class="code"><pre><span class="line">若出现 <span class="symbol">'AttributeError</span>: <span class="symbol">'float'</span> <span class="keyword">object</span> has no attribute <span class="symbol">'items'</span>错误，这是redis包版本不兼容，退回<span class="number">2.10</span>.<span class="number">6</span>版本即可。</span></pre></td></tr><tr><td class="code"><pre><span class="line">pip install redis==<span class="number">2.10</span>.<span class="number">6</span></span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Celery</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask用户头像上传</title>
    <url>/2019/12/09/Flask%E7%94%A8%E6%88%B7%E5%A4%B4%E5%83%8F%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>在完成用户模块时，需要用户上传头像，文件上传功能毕竟属于开发过程中重要的模块，也是出现漏洞较多的点，所以写起来十分小心，并记录下。<a id="more"></a></p>
<blockquote>
<p>在用户注册的时候，平台会自动生成一张图片作为用户的头像，后续用户可以自己上传自己喜欢的头像。</p>
</blockquote>
<h3 id="0x01-用户头像随机生成"><a href="#0x01-用户头像随机生成" class="headerlink" title="0x01 用户头像随机生成"></a>0x01 用户头像随机生成</h3><p>平台头像仿<code>Github</code>初始的头像，回生成随机的头像，具体代码如下，网上应该也有源代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">__author__ = <span class="string">'Joynice'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, math</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GithubAvatarGenerator</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    Github default avatar is a 420*420 image contains 5*5 block vertex.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    Each block is a 70*70 square.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    The width of the frame around block vertex is 35px.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    This is an example avatar.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    https://raw.githubusercontent.com/josephzxy/pic/master/example_github_avatar.png</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    This class aims at generating a github-avatar-like avatars.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    Usage:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        - Initialize this class</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        - Call get_randowm_avatar()</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avatar_width = <span class="number">420</span>  <span class="comment"># the length of line of the avatar</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    block_vertex_dimension = <span class="number">5</span>  <span class="comment"># the dimension of block vertex</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    block_width = <span class="number">70</span>  <span class="comment"># the length of line of block</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    background_color = [<span class="number">230</span>, <span class="number">230</span>, <span class="number">230</span>]  <span class="comment"># the brackground color</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    frame_width = <span class="number">35</span>  <span class="comment"># the width of frame surrounding block vertex</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="comment"># some color that might be approiprate for the color of block.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    color_pool_rgb = (</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">170</span>, <span class="number">205</span>, <span class="number">102</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">159</span>, <span class="number">255</span>, <span class="number">84</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">209</span>, <span class="number">206</span>, <span class="number">0</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">47</span>, <span class="number">107</span>, <span class="number">85</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">47</span>, <span class="number">255</span>, <span class="number">173</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">0</span>, <span class="number">173</span>, <span class="number">205</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">8</span>, <span class="number">101</span>, <span class="number">139</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">180</span>, <span class="number">180</span>, <span class="number">238</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">106</span>, <span class="number">106</span>, <span class="number">255</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">155</span>, <span class="number">211</span>, <span class="number">255</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">204</span>, <span class="number">50</span>, <span class="number">153</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        (<span class="number">101</span>, <span class="number">119</span>, <span class="number">139</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_avatar_vertex</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        Generate a vertex of which each value is a boolean value.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        This 5*5 vertex denotes the strcture of 5*5 block vertex in github avatar</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># get 5*5 2d array full of False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        avatar_vertex = np.empty((self.block_vertex_dimension, self.block_vertex_dimension), dtype=np.bool)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> avatar_vertex:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(math.ceil(self.block_vertex_dimension / <span class="number">2</span>)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                row[i] = <span class="literal">True</span> <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">1</span>) == <span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># copy left half to right half</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> avatar_vertex:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(math.floor(self.block_vertex_dimension / <span class="number">2</span>)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                row[self.block_vertex_dimension - <span class="number">1</span> - i] = row[i]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> avatar_vertex</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_get_avatar_data</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        Generate a 3d array contains color info in each pixel in the avatar</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">        '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># fill the whole img with the background</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        avatar_data = np.zeros((self.avatar_width, self.avatar_width, <span class="number">3</span>), dtype=np.uint8)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        avatar_data[:][:] = self.background_color</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        rand_color_index = random.randint(<span class="number">0</span>, len(self.color_pool_rgb))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        rand_color = self.color_pool_rgb[rand_color_index]</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        avatar_vertex = self._get_avatar_vertex()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="comment"># add blocks according to avatar vertex</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(avatar_vertex)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(avatar_vertex[i])):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                is_True = avatar_vertex[i][j]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> is_True:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    up_left_point = (self.frame_width + i * self.block_width, self.frame_width + j * self.block_width)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">for</span> k <span class="keyword">in</span> range(self.block_width):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">for</span> l <span class="keyword">in</span> range(self.block_width):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            lvl1 = k + up_left_point[<span class="number">0</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            lvl2 = l + up_left_point[<span class="number">1</span>]</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            avatar_data[lvl1][lvl2] = rand_color</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">continue</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> avatar_data</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_random_avatar</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        img = self._get_avatar_data()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cv2.imshow(<span class="string">'My pic'</span>, img)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cv2.waitKey()</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save_avatar</span><span class="params">(self, filepath)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        img = self._get_avatar_data()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        cv2.imwrite(filepath, img)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    gen = GithubAvatarGenerator() <span class="comment">#初始化类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    gen.save_avatar(filepath=<span class="string">'../static/cms/img/user/111.png'</span>) <span class="comment">#保存路径</span></span></pre></td></tr></table></figure>

<h3 id="0x02-平台头像绑定用户"><a href="#0x02-平台头像绑定用户" class="headerlink" title="0x02 平台头像绑定用户"></a>0x02 平台头像绑定用户</h3><p>有头像了，下面就要在用户注册的时候，生成随机头像绑定用户，这里在数据库中有个<code>avatar_path</code>字段用来保存头像存储路径，路径要存相对路径或者使用<code>os.path.dirname(os.path.abspath(__file__))</code>获取项目路径，然后进行路径拼接。头像命名的话，我这里使用用户邮箱进行命名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@manager.option('-u', '--username', dest='username')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@manager.option('-p', '--password', dest='password')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@manager.option('-e', '--email', dest='email')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_cms_user</span><span class="params">(username, password, email)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avatar = GithubAvatarGenerator()  <span class="comment">#chu初始化类</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    path = <span class="string">'../static/cms/img/user/'</span>+ email +<span class="string">'.png'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    avatar.save_avatar(filepath=<span class="string">'./static/cms/img/user/'</span>+ email +<span class="string">'.png'</span>) <span class="comment">#头像保存本地</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    user = User(username=username, password=password, email=email, avatar_path=path)  <span class="comment">#创建用户</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.session.add(user) <span class="comment">#添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    db.session.commit()  <span class="comment">#提交</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    print(<span class="string">'用户添加成功'</span>)</span></pre></td></tr></table></figure>

<h3 id="0x03-用户修改头像"><a href="#0x03-用户修改头像" class="headerlink" title="0x03 用户修改头像"></a>0x03 用户修改头像</h3><p>用户修改头像的话，有几个注意点:</p>
<ul>
<li>用户头像图片类型（png、jpg等常规图片类型检查）</li>
<li>用户上传头像大小限制</li>
<li>用户上传完图片后，重命名保存（防止图片马）</li>
</ul>
<p>前端图片上传的话使用过两个插件,<a href="http://www.bootstrap-fileinput.com/" target="_blank" rel="noopener" title="fileinput">fileinput</a>和<a href="https://www.layui.com/doc/modules/upload.html" target="_blank" rel="noopener">Layui</a>中的图片上传功能，其基本实现都差不多，<code>fileinput</code>这个插件好久没用了，这个插件基于<code>bootstrap</code>，需要导入相关依赖,所有这里用<code>Layui</code>做演示，支持国产，但不得不说“坑”有点多。<br><img src="https://raw.githubusercontent.com/Joynice/image/master/img/%E4%B8%8A%E4%BC%A0.JPG" alt="上传"><br>实现如图的功能，具体弹窗、表单就不说了，主要记录图片上传功能，这个功能主要是给每个题目上传一个背景图，同时具有修改背景图的功能。非常类似用户修改头像。</p>
<ul>
<li>html</li>
</ul>
<p>html代码中用到<code>Layui</code>的<code>form</code>，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"layui-form"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">lay-filter</span>=<span class="string">"example2"</span> <span class="attr">id</span>=<span class="string">"upload_img"</span> <span class="attr">style</span>=<span class="string">"display: none"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>题目ID<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-inline"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">lay-verify</span>=<span class="string">"required"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">placeholder</span>=<span class="string">"请输入题目ID"</span> <span class="attr">class</span>=<span class="string">"layui-input"</span> <span class="attr">disabled</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-form-item"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"layui-form-label"</span>&gt;</span>上传图片<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-inline uploadHeadImage"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-upload-drag"</span> <span class="attr">id</span>=<span class="string">"headImg"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"layui-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>点击上传图片，或将图片拖拽到此处<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-input-inline"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-upload-list"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"layui-upload-img headImage"</span> <span class="attr">id</span>=<span class="string">"demo1"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"150"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"demoText"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></pre></td></tr></table></figure>
<p>html中在第二个<code>layui-form-item</code>设置图片上传，同时form样式设置<code>display:none</code>配合<code>Layui</code>的弹出层使用。</p>
<ul>
<li>js</li>
</ul>
<p>js代码中实现文件上传,<code>Layui</code>图片上传插件自带文件格式判断、大小限制以及预览功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uploadInst = upload.render(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        elem: <span class="string">'#headImg'</span> <span class="comment">//绑定元素</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        , <span class="attr">url</span>: <span class="string">'xxxx'</span> <span class="comment">//上传接口</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        , <span class="attr">method</span>: <span class="string">'post'</span>  <span class="comment">//方法</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        , <span class="attr">headers</span>: &#123;<span class="string">'X-CSRF-TOKEN'</span>: token&#125;  <span class="comment">//设置csrf-token</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        , <span class="attr">size</span>: <span class="number">1024</span> * <span class="number">10</span>  <span class="comment">//前端限制文件大小，这里为10m</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        , <span class="attr">accept</span>: <span class="string">'images'</span>  <span class="comment">//接受文件类型,这里为图片</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        , <span class="attr">data</span>: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="string">'id'</span>: data.id,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;  <span class="comment">//同时传递题目ID</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        , <span class="attr">before</span>: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="comment">//预读本地文件示例，不支持ie8</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                            obj.preview(<span class="function"><span class="keyword">function</span> (<span class="params">index, file, result</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                $(<span class="string">'#demo1'</span>).attr(<span class="string">'src'</span>, result); <span class="comment">//图片链接（base64）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                            &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        , <span class="attr">done</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="comment">//上传完毕回调</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="keyword">if</span> (res.code === <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                table.reload(<span class="string">'LAY-app-content-list'</span>);  <span class="comment">//表格重载</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                                layer.msg(res.message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                layer.closeAll(<span class="string">'page'</span>);  <span class="comment">//关闭弹窗</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                <span class="keyword">return</span> layer.msg(res.message);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        , <span class="attr">error</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="comment">//请求异常回调</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                            <span class="keyword">var</span> demoText = $(<span class="string">'#demoText'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            demoText.html(<span class="string">'&lt;span style="color: #FF5722;"&gt;上传失败&lt;/span&gt; &lt;a class="layui-btn layui-btn-mini demo-reload"&gt;重试&lt;/a&gt;'</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            demoText.find(<span class="string">'.demo-reload'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                                uploadInst.upload();</span></pre></td></tr><tr><td class="code"><pre><span class="line">                            &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    &#125;);</span></pre></td></tr></table></figure>
<p>虽然使用这个插件非常方便，但是实现这个功能还是遇到很多的坑，这里记录我解决的一个坑<br><strong>上传第一个图片正常，但是上传第二个文件的时候无反应</strong><br>原因： 在上传完，第一个图片后，上传html代码中会绑定一些元素，如果页面没有刷新的话，在进行下面的上传，会出现无反应的现象。<br>解决办法：在弹窗层销毁后，将元素重置。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">end: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">$(<span class="string">'.uploadHeadImage'</span>).empty().append(<span class="string">" &lt;div class=\"layui-upload-drag\" id=\"headImg\"&gt;\n"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="string">"                    &lt;i class=\"layui-icon\"&gt;&lt;/i&gt;\n"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="string">"                    &lt;p&gt;点击上传图片，或将图片拖拽到此处&lt;/p&gt;\n"</span> +</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">"                &lt;/div&gt;"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">                &#125;</span></pre></td></tr></table></figure>
<ul>
<li>后端</li>
</ul>
<p>后端的话，没有添加文件大小检测，其他都实现了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    file = request.files[<span class="string">'file'</span>]  <span class="comment">#获取文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    id = request.form.get(<span class="string">'id'</span>)  <span class="comment">#获取id</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> id:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> field.params_error(message=<span class="string">'参数缺失'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> file <span class="keyword">and</span> allowed_file(file.filename, ALLOWED_EXTENSIONS=config.ALLOWED_PIC_EXTENSIONS):  <span class="comment">#文件类型判断</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        filename = secure_filename(file.filename)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new_name = tools.rename(filename)  <span class="comment">#重命名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        new_path = os.path.join(config.UPLOAD_PIC_PATH, tools.rename(filename))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        file.save(new_path)  <span class="comment">#保存文件</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        vul = Vuls.query.get(id)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> vul:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">return</span> field.params_error(message=<span class="string">'题目不存在'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        old_path = os.path.join(config.UPLOAD_PIC_PATH, vul.img)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> vul.img:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">if</span> os.path.exists(old_path):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                os.remove(old_path)  <span class="comment">#删除上一个头像</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        vul.img = new_name</span></pre></td></tr><tr><td class="code"><pre><span class="line">        db.session.commit()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> field.layui_success(message=<span class="string">'上传成功'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> field.params_error(message=<span class="string">'文件类型错误'</span>)</span></pre></td></tr></table></figure>
<p>此片文章记录了Flask实现文件上传的全过程，以供以后学习查看。</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>python关于时间操作</title>
    <url>/2019/12/09/python%E5%85%B3%E4%BA%8E%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>Python中时间操作使用还是挺频繁的，主要使用到<code>time</code>和<code>datetime</code>这两个库，下面记录常用的时间操作<a id="more"></a></p>
<h3 id="当前时间戳"><a href="#当前时间戳" class="headerlink" title="当前时间戳"></a>当前时间戳</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="code"><pre><span class="line">ticks = time.time()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(ticks)</span></pre></td></tr></table></figure>

<h3 id="当前时间-now"><a href="#当前时间-now" class="headerlink" title="当前时间(now)"></a>当前时间(now)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span></pre></td></tr><tr><td class="code"><pre><span class="line">now = datetime.datetime.now()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(now)</span></pre></td></tr></table></figure>

<h3 id="本地时间-localtime"><a href="#本地时间-localtime" class="headerlink" title="本地时间(localtime)"></a>本地时间(localtime)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="code"><pre><span class="line">loacltime = time.loacltime()</span></pre></td></tr></table></figure>

<h3 id="格式化时间-strftime"><a href="#格式化时间-strftime" class="headerlink" title="格式化时间(strftime)"></a>格式化时间(strftime)</h3><ul>
<li><p>datetime</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span></pre></td></tr><tr><td class="code"><pre><span class="line">now = datetime.datetime.now()</span></pre></td></tr><tr><td class="code"><pre><span class="line">strftime = now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(strftime)</span></pre></td></tr></table></figure>
</li>
<li><p>time</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="code"><pre><span class="line">now = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime())</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(now)</span></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="时间转时间戳-timestamp"><a href="#时间转时间戳-timestamp" class="headerlink" title="时间转时间戳(timestamp)"></a>时间转时间戳(timestamp)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span></pre></td></tr><tr><td class="code"><pre><span class="line">now = datetime.datetime.now()</span></pre></td></tr><tr><td class="code"><pre><span class="line">t = now.timestamp()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(t)</span></pre></td></tr></table></figure>

<h3 id="时间戳转时间-fromtimestamp"><a href="#时间戳转时间-fromtimestamp" class="headerlink" title="时间戳转时间(fromtimestamp)"></a>时间戳转时间(fromtimestamp)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span></pre></td></tr><tr><td class="code"><pre><span class="line">ticks = time.time()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(datetime.fromtimestamp(ticks))</span></pre></td></tr></table></figure>

<h3 id="时间加减-timedelta"><a href="#时间加减-timedelta" class="headerlink" title="时间加减(timedelta)"></a>时间加减(timedelta)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span></pre></td></tr><tr><td class="code"><pre><span class="line">d1 = datetime.datetime.now()</span></pre></td></tr><tr><td class="code"><pre><span class="line">d2 = d1 + datetime.timedelta(hours = <span class="number">8</span>)  <span class="comment">#时间+8小时</span></span></pre></td></tr></table></figure>

<p><strong>其中可选参数:天(days), 小时(hours), 分钟(minutes), 秒(seconds), 微秒(microseconds)</strong></p>
<h3 id="开发中的操作"><a href="#开发中的操作" class="headerlink" title="开发中的操作"></a>开发中的操作</h3><ul>
<li>返回一周时间列表[‘2019-12-8’, ‘2019-12-9’,…]<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span></pre></td></tr><tr><td class="code"><pre><span class="line">today = datetime.date.today()</span></pre></td></tr><tr><td class="code"><pre><span class="line">date_list = [(today - datetime.timedelta(days=i)).strftime(<span class="string">'%Y-%m-%d'</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">7</span>)]  <span class="comment">#控制天数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">date_list.reverse()</span></pre></td></tr><tr><td class="code"><pre><span class="line">print(date_list)</span></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>记Flask-Sqlalchemy一次奇葩操作</title>
    <url>/2019/12/06/%E8%AE%B0Flask-Sqlalchemy%E4%B8%80%E6%AC%A1%E5%A5%87%E8%91%A9%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<p>在写用户编辑的时候，进行前端过滤，只是将用户ID和更改的字段传递给后端，可以后端我并不知道哪个字段更改啊(真是自己给自己挖坑啊)现在想想是不是当时喝醉写的代码</p>
<a id="more"></a>

<blockquote>
<p>具体代码就不看了，说下个人认为正常操作吧</p>
</blockquote>
<p>正常情况下，前端正常的判断还是需要的，然后将用户的所有字段都传递过来，并不是只有更改的字段，如果只传更改字段，其实在获取各个字段的时候，将默认值改成数据库中的数据也可以操作，这里我会再写一篇文章进行详细记录，先说说这次奇葩操作。</p>
<table>
<thead>
<tr>
<th align="center">id</th>
<th align="center">name</th>
<th align="center">email</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">张三</td>
<td align="center"><a href="mailto:zhangsan@qq.com" target="_blank" rel="noopener">zhangsan@qq.com</a></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">李四</td>
<td align="center"><a href="mailto:lisi@qq.com" target="_blank" rel="noopener">lisi@qq.com</a></td>
</tr>
</tbody></table>
<p>比如我现在用这个表，前端我需要修改张三的邮箱，而我往后端传递的参数只有<code>id</code>和修改后<code>email</code>，而后端正常更改用户数据的话，先根据<code>id</code>查询到相关用户,然后进行修改。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">user = User.query.get(id)</span></pre></td></tr><tr><td class="code"><pre><span class="line">user.email = <span class="string">'zhangsan111@qq.com'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit() <span class="comment">#提交</span></span></pre></td></tr></table></figure>
<p>可是我只传<code>email</code>和<code>id</code>的话，我可以根据<code>id</code>找到这个用户,但是再进行<code>user.xxx=xxx</code>时，我就不知道如何解决了，于是酒劲上来了，突发奇想，这样操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = request.values   <span class="comment">#获取返回的字典如&#123;'id':1, 'email':'zhangsan111@qq.com'&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">key = list(data.keys())  <span class="comment">#获取字典中的key如：['id', 'name']</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">key.remove(<span class="string">'id'</span>)  <span class="comment">#将列表中的id删除,应为主键不可更改</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> key:</span></pre></td></tr><tr><td class="code"><pre><span class="line">4user.__setattr__(i, data.get(i))  <span class="comment">#将列表中的其他字段通过user.__setattr__('email','zhangsan111@qq.com')进行更改，这样我就不要顾虑前端哪个字段更改了，都可以解决。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">db.session.commit() <span class="comment">#提交</span></span></pre></td></tr></table></figure>

<p>现在看看这个操作还是想笑，后续我会关于这个实现，更新个正常点的方法。</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>python实现断点续传</title>
    <url>/2019/12/06/python%E5%AE%9E%E7%8E%B0%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</url>
    <content><![CDATA[<p>在写观星资产扫描器的时候，IP定位用的是<a href="https://geoip.com/" target="_blank" rel="noopener">Geoip</a>提供的IP库实现的，每个用户在使用扫描器的时候如果本地没有IP库需要从远端进行下载,然而这个文件将近50M，为尽量减少下载的效率，采用断点续传。<a id="more"></a></p>
<blockquote>
<p>断点续传就是在上传或者下载的时候，出现网络状况，可以从已经上传或下载的部分开始继续上传下载未完成的部分，而没有必要从头开始上传下载。用户可以节省时间，提高速度。</p>
</blockquote>
<p><strong>为简单明了的表达自己的意思，画了个流程图</strong></p>
<p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/TIM%E6%88%AA%E5%9B%BE20191206172901.png" alt="断点续传"></p>
<h3 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h3><p>首先<a href="https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz" target="_blank" rel="noopener">访问地址</a>获取文件的大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">req = requests.get(url=url, stream=<span class="literal">True</span>, verify=<span class="literal">False</span>, headers=&#123;<span class="string">"User-Agent"</span>: self.user_agent&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> req.status_code == <span class="number">200</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    total_size = int(req.headers[<span class="string">'Content-Length'</span>])  <span class="comment">#获取文件的大小</span></span></pre></td></tr></table></figure>
<h3 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h3><p>然后判断本地是否存在这个文件，定义本地文件的大小，从而找到续传的起始字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> os.path.exists(os.path.join(os.getcwd(), <span class="string">'dbs'</span>, <span class="string">'GeoLite2-City.tar.gz'</span>)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">    temp_size = os.path.getsize(os.path.join(os.getcwd(), <span class="string">'dbs'</span>, <span class="string">'GeoLite2-City.tar.gz'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    temp_size = <span class="number">0</span></span></pre></td></tr></table></figure>
<h3 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h3><p>下面就是最重要的部分，重新请求头，并设置获取文件的起始字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">headers = &#123;<span class="string">"User-Agent"</span>: self.user_agent, <span class="string">'Range'</span>: <span class="string">'bytes=%d-'</span> % temp_size&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">re_req = requests.get(url, stream=<span class="literal">True</span>, verify=<span class="literal">False</span>, headers=headers)</span></pre></td></tr></table></figure>
<blockquote>
<p>其中说下Http请求头中的<code>Range</code>字段,这个实现断点续传的关键</p>
</blockquote>
<pre><code>Range: bytes=start-end</code></pre><p>例如</p>
<p>Range: bytes=10- ：第10个字节及最后个字节的数据</p>
<p>Range: bytes=40-100 ：第40个字节到第100个字节之间的数据.</p>
<p>注意，这个表示[start,end]，即是包含请求头的start及end字节的，所以，下一个请求，应该是上一个请求的[end+1, nextEnd]</p>
<h3 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h3><p>最后判断文件的大小是否和远端文件大小相等，如果相等进行解压、提取,这部分就包含文件解压，剪切的操作,</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> temp_size == total_size:</span></pre></td></tr><tr><td class="code"><pre><span class="line">4<span class="keyword">try</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">44<span class="comment">#文件操作</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">except</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">raise</span> FileNotFoundError(<span class="string">'文件解压失败'</span>)</span></pre></td></tr></table></figure>

<h3 id="整体代码"><a href="#整体代码" class="headerlink" title="整体代码"></a>整体代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__download_and_tar_geolite</span><span class="params">(self, url=<span class="string">'https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz'</span>)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    req = requests.get(url=url, stream=<span class="literal">True</span>, verify=<span class="literal">False</span>, headers=&#123;<span class="string">"User-Agent"</span>: self.user_agent&#125;)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> req.status_code == <span class="number">200</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        total_size = int(req.headers[<span class="string">'Content-Length'</span>])</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> os.path.exists(os.path.join(os.getcwd(), <span class="string">'dbs'</span>, <span class="string">'GeoLite2-City.tar.gz'</span>)):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            temp_size = os.path.getsize(os.path.join(os.getcwd(), <span class="string">'dbs'</span>, <span class="string">'GeoLite2-City.tar.gz'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            temp_size = <span class="number">0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        headers = &#123;<span class="string">"User-Agent"</span>: self.user_agent, <span class="string">'Range'</span>: <span class="string">'bytes=%d-'</span> % temp_size&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        re_req = requests.get(url, stream=<span class="literal">True</span>, verify=<span class="literal">False</span>, headers=headers)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">with</span> open(os.path.join(os.getcwd(), <span class="string">'dbs'</span>, <span class="string">'GeoLite2-City.tar.gz'</span>), <span class="string">'ab'</span>) <span class="keyword">as</span> f:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">for</span> chuck <span class="keyword">in</span> re_req.iter_content(chunk_size=<span class="number">1024</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">if</span> chuck:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    temp_size += len(chuck)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    f.write(chuck)   <span class="comment">#文件保存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                    f.flush()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    done = int(<span class="number">50</span> * temp_size / total_size)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    sys.stdout.write(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="string">"正在进行数据库下载(不要结束程序)：[%s%s] %d%%"</span> % (</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="string">'█'</span> * done, <span class="string">' '</span> * (<span class="number">50</span> - done), <span class="number">100</span> * temp_size / total_size))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    sys.stdout.flush()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                print()  <span class="comment"># 避免上面\r 回车符</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">if</span> temp_size == total_size:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">try</span>:   </span></pre></td></tr><tr><td class="code"><pre><span class="line">                file = tarfile.open(os.path.join(os.getcwd(), <span class="string">'dbs'</span>, <span class="string">'GeoLite2-City.tar.gz'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                file.extractall(path=os.path.join(os.getcwd(), <span class="string">'dbs'</span>))  <span class="comment">#文件解压</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                walk = os.listdir(os.path.join(os.getcwd(), <span class="string">'dbs'</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> walk:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                    <span class="keyword">if</span> <span class="string">'GeoLite2-City_'</span> <span class="keyword">in</span> i:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        src_path = os.path.join(os.getcwd(), <span class="string">'dbs'</span>, i, <span class="string">'GeoLite2-City.mmdb'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        des_path = os.path.join(os.getcwd(), <span class="string">'dbs'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">                        shutil.move(src_path, des_path) <span class="comment">#文件移动</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                        <span class="keyword">break</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                file.close()</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">except</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="keyword">raise</span> FileNotFoundError(<span class="string">'文件操作失败'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'文件缺失'</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">else</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">raise</span> ConnectionError(<span class="string">'无法连接数据库'</span>)</span></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则表达式收集</title>
    <url>/2019/12/06/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>正则表达式的应用的地方还是挺多的，如爬虫中提取相关数据，以及web开发中用户提交数据验证，所有收集些常用的正则表达式，方便自已查找使用。</p>
<a id="more"></a>

<blockquote>
<p>网上版本很多，也不知到谁是原创，我仅提取我需要的部分，在以后，自己会继续更新更多的正则表达式，以供参考学习。</p>
</blockquote>
<h3 id="0x01-验证数字的表达式"><a href="#0x01-验证数字的表达式" class="headerlink" title="0x01 验证数字的表达式"></a>0x01 验证数字的表达式</h3><p>数字：<code>^[0-9]*$</code></p>
<p>n位的数字：<code>^d{n}$</code></p>
<p>至少n位的数字：<code>^d{n,}$</code></p>
<p>m-n位的数字：<code>^d{m,n}$</code></p>
<p>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></p>
<p>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]{1,2})?$</code></p>
<p>带1-2位小数的正数或负数：<code>^(-)?d+(.d{1,2})?$</code></p>
<p>正数、负数、和小数：<code>^(-|+)?d+(.d+)?$</code></p>
<p>有两位小数的正实数：<code>^[0-9]+(.[0-9]{2})?$</code></p>
<p>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]{1,3})?$</code></p>
<p>非零的正整数：<code>^[1-9]d*$</code> 或 <code>^([1-9][0-9]*){1,3}$</code> 或 <code>^+?[1-9][0-9]*$</code></p>
<p>非零的负整数：<code>^-[1-9][]0-9&quot;*$</code> 或 <code>^-[1-9]d*$</code></p>
<p>非负整数：<code>^d+$</code> 或 <code>^[1-9]d*|0$</code></p>
<p>非正整数：<code>^-[1-9]d*|0$</code> 或 <code>^((-d+)|(0+))$</code></p>
<p>非负浮点数：<code>^d+(.d+)?$</code> 或 <code>^[1-9]d*.d*|0.d*[1-9]d*|0?.0+|0$</code></p>
<p>非正浮点数：<code>^((-d+(.d+)?)|(0+(.0+)?))$</code> 或 <code>^(-([1-9]d*.d*|0.d*[1-9]d*))|0?.0+|0$</code></p>
<p>正浮点数：<code>^[1-9]d*.d*|0.d*[1-9]d*$</code> 或 <code>^(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></p>
<p>负浮点数：<code>^-([1-9]d*.d*|0.d*[1-9]d*)$</code> 或 <code>^(-(([0-9]+.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></p>
<p>浮点数：<code>^(-?d+)(.d+)?$</code> 或 <code>^-?([1-9]d*.d*|0.d*[1-9]d*|0?.0+|0)$</code></p>
<h3 id="0x02-验证字符串的表达式"><a href="#0x02-验证字符串的表达式" class="headerlink" title="0x02 验证字符串的表达式"></a>0x02 验证字符串的表达式</h3><p>汉字：<code>^[\u4e00-\u9fa5]+$</code></p>
<p>英文和数字：<code>^[A-Za-z0-9]+$</code> 或 <code>^[A-Za-z0-9]{4,40}$</code></p>
<p>长度为3-20的所有字符：<code>^.{3,20}$</code></p>
<p>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></p>
<p>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></p>
<p>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></p>
<p>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></p>
<p>由数字、26个英文字母或者下划线组成的字符串：<code>^w+$</code> 或 <code>^w{3,20}$</code></p>
<h3 id="0x03-特殊需求表达式"><a href="#0x03-特殊需求表达式" class="headerlink" title="0x03 特殊需求表达式"></a>0x03 特殊需求表达式</h3><p>去掉左右空格:<br><code>str.replace(/(^\s*)|(\s*$)/g, &#39;&#39;)</code></p>
<p>去掉所有空格:<br><code>str.replace(/\s+/g, &#39;&#39;)</code></p>
<p>密码需由8位以上大写字母、小写字母、数字及特殊符号组成: <code>/^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!.,@$%^&amp;*-]).{8,}$/</code></p>
<p>Email地址：<code>^w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*$</code></p>
<p>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</p>
<p>InternetURL：[a-zA-z]+://[<code>^s]* 或</code>^http://([w-]+.)+[w-]+(/[w-./?%&amp;=]*)?$`</p>
<p>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])d{8}$</code></p>
<p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^((d{3,4}-)|d{3.4}-)?d{7,8}$</code></p>
<p>国内电话号码<code>(0511-4405222、021-87888822)：d{3}-d{8}|d{4}-d{7}</code></p>
<p>身份证号(15位、18位数字)：<code>^d{15}|d{18}$</code></p>
<p>短身份证号码(数字、字母x结尾)：<code>^([0-9]){7,18}(x|X)?$</code> 或 <code>^d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</code></p>
<p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]{4,15}$</code></p>
<p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]w{5,17}$</code></p>
<p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$</code></p>
<p>日期格式：<code>^d{4}-d{1,2}-d{1,2}</code></p>
<p>Html中title：<code>&lt;title&gt;(.*?)&lt;/title&gt;|&lt;TITLE&gt;(.*?)&lt;/TITLE&gt;</code></p>
<p>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></p>
<p>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code><br>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</code></p>
<p>空白行的正则表达式：<code>s*</code> (可以用来删除空白行)</p>
<p>HTML标记的正则表达式：<code>&lt;(S*?)[`^&gt;]*&gt;.*?&lt;/&gt;|&lt;.*? /&gt;</code> (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p>
<p>首尾空白字符的正则表达式：<code>^s*|s*$</code>或(<code>^s*)|(s*$</code>) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p>
<p>腾讯QQ号：<code>[1-9][0-9]{4,}</code> (腾讯QQ号从10000开始)</p>
<p>中国邮政编码：<code>[1-9]d{5}(?!d)</code> (中国邮政编码为6位数字)</p>
<p>IP地址：<code>d+.d+.d+.d+</code> (提取IP地址时有用)</p>
<p>IP地址：<code>((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</code></p>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>删除github误传文件</title>
    <url>/2019/12/06/%E5%88%A0%E9%99%A4github%E8%AF%AF%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>在使用<code>git push</code>时，有时忘记忽略某些不必要上传的文件，从而上传到Github上，记录如何删除这些文件</p>
<a id="more"></a>

<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">git rm -r <span class="comment">--cached &lt;target&gt;</span></span></pre></td></tr></table></figure>
<p><strong>target</strong>：删除对象</p>
<p>然后进行提交</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m<span class="string">"删除target"</span></span></pre></td></tr></table></figure>

<p>最后进行上传,就可以删除Github上误传的文件了，下次再上传的话，修改忽略文件，否则还会上传。</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>python将列表平均分成n份</title>
    <url>/2019/12/05/python%E5%B0%86%E5%88%97%E8%A1%A8%E5%B9%B3%E5%9D%87%E5%88%86%E6%88%90n%E4%BB%BD/</url>
    <content><![CDATA[<p>在开发中遇到，需要将下发的任务平均分给n个工人，如何进行分配，写个函数进行记录。</p>
<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_spilt</span><span class="params">(arr, n)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="string">'''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    将列表平均分成n份</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :param list:  列表对象</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :param n:  份数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    :return:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="string">    '''</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(arr, list):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isinstance(n, int) <span class="keyword">or</span> n&lt;=<span class="number">0</span> <span class="keyword">or</span> <span class="keyword">not</span> str(n).isdigit():</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    length = len(arr)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    new_list = []</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span></pre></td></tr><tr><td class="code"><pre><span class="line">        one_list = arr[math.floor(i / n * length):math.floor((i + <span class="number">1</span>) / n * length)]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        new_list.append(one_list)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> new_list</span></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>PicGo+Github打造专属图床</title>
    <url>/2019/12/05/PicGo-Github%E6%89%93%E9%80%A0%E4%B8%93%E5%B1%9E%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>Hexo搭建博客，有个缺点就是没有提供图片上传存储，而<code>PicGo</code>这个开源工具配合<code>Github</code>仓库就可以解决这个问题哦，下面我要开始了…</p>
<a id="more"></a>

<h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p><a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a>是Github上开源的图片上传管理工具，支持MacOS、Windows以及Linux，同时支持多种图床</p>
<ul>
<li>微博图床</li>
<li>七牛图床</li>
<li>腾讯云</li>
<li>又拍云</li>
<li>Github</li>
<li>SM.MS</li>
<li>阿里云</li>
<li>Imgur</li>
</ul>
<blockquote>
<p>这个我主要介绍使用Github当做图床如何使用，虽然Github比较慢，但是白嫖还是挺舒服的嘻嘻。</p>
</blockquote>
<h2 id="PicGo-配置"><a href="#PicGo-配置" class="headerlink" title="PicGo 配置"></a>PicGo 配置</h2><ol>
<li><p>下载<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">PicGo</a>，选择符合的版本</p>
</li>
<li><p>在Github创建个仓库，用来存储图片</p>
</li>
<li><p>然后进行PicGo设置<br><img src="https://raw.githubusercontent.com/Joynice/image/master/img/TIM%E6%88%AA%E5%9B%BE20191205153724.png" alt=""></p>
<ul>
<li>设置Github创建的仓库的名称格式如：用户名/仓库名</li>
<li>设置commit分支，默认<code>master</code></li>
<li><a href="https://github.com/settings/tokens" target="_blank" rel="noopener">生成Githb Token</a>,将Token值填入</li>
<li>指定存储路径，存在仓库中生成文件夹，并存储在文件夹中</li>
<li>自定义域名没用过，gg</li>
</ul>
</li>
</ol>
<blockquote>
<p>配置好后就可以使用PicGo进行图片上传了</p>
</blockquote>
<h2 id="PicGO-使用"><a href="#PicGO-使用" class="headerlink" title="PicGO 使用"></a>PicGO 使用</h2><p>PicGo使用非常方便</p>
<ol>
<li>点击到上传区</li>
<li>上传后，到相册中就可以copy图片地址，然后粘贴就好，非常低方便</li>
</ol>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>PicGo</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>解决github上提交无记录</title>
    <url>/2019/12/05/%E8%A7%A3%E5%86%B3github%E4%B8%8A%E6%8F%90%E4%BA%A4%E6%97%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>使用Github时间也不久了，大学的时候经常上传些自己写的小项目和课程课设，毕业后公司项目也使用Github私有仓库进行项目托管，经常commit。但是发现Github的<code>overview</code>的提交图上并没有多少，于是记录这次排查。</p>
<a id="more"></a>

<p>首先看看私有贡献是否开启，毕竟我的好多提交都是往私有仓库提交的。发现开启的，但是并没有什么卵变化。</p>
<p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/TIM%E6%88%AA%E5%9B%BE20191205111500.png" alt="私有贡献"></p>
<p>于是排查Github上绑定的邮箱，这几个邮箱也是我经常用的，没有什么问题</p>
<p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/TIM%E6%88%AA%E5%9B%BE20191205112149.png" alt="绑定邮箱"></p>
<p>同时我提交的时候都是往<code>master</code>默认分支上提交，同时也是项目的协作者，不是<code>fork</code>的。</p>
<p>最后排查本地git配置</p>
<pre><code>git config user.email   //查看绑定的邮箱</code></pre><p><img src="https://raw.githubusercontent.com/Joynice/image/master/img/TIM%E6%88%AA%E5%9B%BE20191205145229.png" alt=""></p>
<p>起初没有发现什么，但是仔细一看<code>foxmail</code>少了<code>l</code>，太沙雕了，于是把这个少了<code>l</code>的邮箱绑定到Github上，同时本地修改配置</p>
<pre><code>git config --global user.email &quot;xxx&quot; //email</code></pre><p>这样重新以后commit就会以重新配置的邮箱进行提交。</p>
<p>写到这里还是有个疑问，我如果删除Github上那个错误的邮箱，我的以错误邮箱进行的commit记录还有吗？这里还没敢测试。</p>
<p>总结下可能导致这个问题的原因</p>
<ul>
<li>没有往默认分支及<code>master</code>分支上commit</li>
<li>commit的仓库为Fork的仓库，并不是独立仓库</li>
<li>私有贡献没有开启</li>
<li>Github上绑定的邮箱与本地Git配置邮箱不相同（我出现的问题）</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo常用命令</title>
    <url>/2019/12/05/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>在大二的时候就用<code>Hexo</code>搭建过自己的博客，但是后来接触到各种博客平台，就没在使用Hexo，一方面在国内访问速度有点慢，另一方面写一篇文章进行的步骤过于繁杂。但是工作后，发现好多大佬都有自己独立的博客（向大佬学习），于是重新捡起自己遗弃很久的博客。</p>
<a id="more"></a>
<p><strong>同时感谢<a href="https://bjj.dropsec.xyz/" target="_blank" rel="noopener">AJay13</a>帮我搭建<code>next</code>主题</strong></p>
<ol>
<li>hexo init</li>
</ol>
<p>命令主要用于初始化本地文件夹为博客的根目录</p>
<pre><code>hexo init [floder]</code></pre><p><code>floder</code>为可选参数，用于指定初始化目录路径，若不指定默认为当前目录</p>
<ol start="2">
<li>hexo new</li>
</ol>
<p>命令主要英语创建文章，可以简写为<code>hexo n</code></p>
<pre><code>hexo new post &lt;title&gt;</code></pre><p><code>title</code>为文章标题，如果参数中存在空格，则使用双引号包裹。命令执行后，会在<code>sourse/_post/</code>目录下生成指定标题的md文件，在此文件中编写文章即可。</p>
<ol start="3">
<li>hexo generate</li>
</ol>
<p>命令主要生成本地静态文件，一般可以简写为<code>hexo g</code></p>
<pre><code>hexo generate</code></pre><p>同时可以搭配<code>-d</code>使用，生成本地文件并上传部署，这样在博客上就可以看到更新的内容。</p>
<ol start="4">
<li>hexo server</li>
</ol>
<p>命令用于开启本地服务器，可以本地调试，一般可以简写<code>hexo s</code></p>
<pre><code>hexo server</code></pre><ul>
<li><code>-p</code>: 指定服务器端口，默认4000</li>
<li><code>-i</code>: 指定服务器IP地址，默认0.0.0.0</li>
<li><code>-s</code>: 静态模式，仅提供public文件夹中的文件禁用文件监视</li>
</ul>
<ol start="5">
<li>hexo deploy</li>
</ol>
<p>命令主要用于部署远端网站，一般可以简写<code>hexo d</code></p>
<pre><code>hexo deploy</code></pre><p>同时在使用该命令前，要在<code>_config.yml</code>文件中修改git配置</p>
<pre><code>deploy:
    type: git
    repo: &lt;repository url&gt;
    branch: master
    message: 自定义提交消息，默认为Site updated: {{ now('YYYY-MM-DD HH:mm:ss') }}</code></pre><ol start="6">
<li>hexo clean</li>
</ol>
<p>命令主要用于清理缓存文件，网站存在异常时可以尝试此操作</p>
<pre><code>hexo clean</code></pre><ol start="7">
<li>option</li>
</ol>
<p>其他参数</p>
<ul>
<li>hexo –safe</li>
</ul>
<p>表示安全模式，用于禁用加载插件和脚本</p>
<ul>
<li>hexo –debug</li>
</ul>
<p>表示调试模式，用于将消息详细记录到终端和<code>debug.log</code>文件</p>
<ul>
<li>hexo –slient</li>
</ul>
<p>表示静默模式，用于静默输出到终端</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu设置静态IP地址</title>
    <url>/2019/12/04/ubuntu%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p>最近在Esxi中配置<code>ubuntu18.04 server</code>记录如何配置静态IP<a id="more"></a>。因为<code>ubuntu18.04</code>的网络管理程序使用<code>netplan</code>来管理，所有配置方式也更改了。</p>
<p>查看本机IP</p>
<pre><code>ifconfig -a</code></pre><p>查看当前配置文件</p>
<pre><code>cat /etc/netplan/50-cloud-init.yaml</code></pre><p>如果要使用静态IP的话，需要修改为下面的样子：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file is generated from information provided by</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># the datasource.  Changes to it will not persist across an instance.</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># To disable cloud-init's network configuration capabilities, write a file</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># network: &#123;config: disabled&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="attr">network:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">ethernets:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="attr">enp0s3:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">addresses:</span> <span class="string">[192.168.199.101/24,</span> <span class="string">]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">dhcp4:</span> <span class="literal">no</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">dhcp6:</span> <span class="literal">no</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">gateway4:</span>  <span class="number">192.168</span><span class="number">.199</span><span class="number">.1</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">            <span class="attr">nameservers:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                <span class="attr">addresses:</span> <span class="string">[8.8.8.8,</span> <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span><span class="string">]</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="attr">version:</span> <span class="number">2</span></span></pre></td></tr></table></figure>
<p>将上述配置改成自己的IP、网关、DNS，最后运行生效配置。</p>
<pre><code>netplan apply</code></pre>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu更换apt源</title>
    <url>/2019/12/04/ubuntu%E6%9B%B4%E6%8D%A2apt%E6%BA%90/</url>
    <content><![CDATA[<p>将ubuntu的apt设置为国内的源（阿里）</p>
<a id="more"></a>
<ol>
<li>备份系统自带源<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list /</span>etc<span class="regexp">/apt/</span>sources.list.bak</span></pre></td></tr></table></figure></li>
<li>修改/etc/apt/sources.list文件<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/apt/sources.<span class="keyword">list</span></span></pre></td></tr></table></figure>
加入如下内容:<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">deb-src <span class="string">http:</span><span class="comment">//archive.ubuntu.com/ubuntu xenial main restricted #Added by software-properties</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial main restricted</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial main restricted multiverse universe #Added by software-properties</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-updates main restricted</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-updates main restricted multiverse universe #Added by software-properties</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial universe</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-updates universe</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial multiverse</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-updates multiverse</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse #Added by software-properties</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//archive.canonical.com/ubuntu xenial partner</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb-src <span class="string">http:</span><span class="comment">//archive.canonical.com/ubuntu xenial partner</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-security main restricted</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb-src <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-security main restricted multiverse universe #Added by software-properties</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-security universe</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">deb <span class="string">http:</span><span class="comment">//mirrors.aliyun.com/ubuntu/ xenial-security multiverse</span></span></pre></td></tr></table></figure></li>
<li>更新生效<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">apt-<span class="keyword">get</span> <span class="keyword">update</span></span></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>python获取网站IP以及识别IP位置</title>
    <url>/2019/12/04/python%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99IP%E4%BB%A5%E5%8F%8A%E8%AF%86%E5%88%ABIP%E4%BD%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>在一次开发过程中，需要获取网站的IP，以及改IP所在的地址。<br>第一个想法就是使用第三方接口，但是想想，还是自己实现比较实在，网上百度了一下，还是有些教程，所以就写篇文章记录下如何实现。</p>
<a id="more"></a>
<h3 id="获取IP"><a href="#获取IP" class="headerlink" title="获取IP"></a>获取IP</h3><p>在我们访问网站时，大多实用的域名进行访问，但是在项目开发过程中，我需要获得网站域名所绑定的IP地址，因为项目中导入了<code>requests</code>库，就想百度下<code>requests</code>是否能够实现这个功能。<br><img src="https://upload-images.jianshu.io/upload_images/14106334-5e259793be6c1d0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网站IP"><br>经过一番搜索终于找到相关的信息，具体实现如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span></pre></td></tr><tr><td class="code"><pre><span class="line">req = requests.get(<span class="string">'url'</span>,stream = <span class="literal">True</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">ip_and_port = req.raw._connection.sock.getpeername() <span class="comment">#返回元组，(ip, port)</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">text = req.text</span></pre></td></tr></table></figure>
<p>这样就可以在一次请求获得所有想要的信息。</p>
<h3 id="获取IP所在地理位置"><a href="#获取IP所在地理位置" class="headerlink" title="获取IP所在地理位置"></a>获取IP所在地理位置</h3><p>刚才的需求解决了，那么得到<code>IP</code>，我就想获得IP地址所在的位置如：<code>国家</code>、<code>城市</code>等等，本想这个功能应该只能调用第三方接口了吧，但是谷歌一下，发现python中有实现这个功能的库<a href="https://pypi.org/project/geoip2/" target="_blank" rel="noopener">geoip2</a>，简单的浏览下它的官网，发现他们实现这个功能就是基于数据库比对，可以实现以下功能：</p>
<ul>
<li>IP位置查询</li>
<li>IP是否高匿，解析真实地址</li>
<li>域名查询</li>
<li>连接方式查询</li>
<li>ASD查询</li>
<li>ISP查询</li>
</ul>
<p>这些功能的实现重要依靠相应的数据库匹配进行实现的，我们的使用方法也很简单，<code>geoip2</code>支持两种方式匹配数据库，一种是使用在线的数据库，但是考虑到对方的库在国外，可能耗时较大，所以选择将数据库下载下来，进行使用，下面的例子以查询IP所在位置进行记录。<br>先安装<code>geoip2</code>库</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> geoip2</span></pre></td></tr></table></figure>
<p>然后，数据库下载地址（包括db和csv两种格式，建议下载db格式的，如果你要看其中内容可以下载csv）：<br>          <a href="http://dev.maxmind.com/geoip/geoip2/geolite2" target="_blank" rel="noopener">http://dev.maxmind.com/geoip/geoip2/geolite2</a></p>
<p>下面用代码说话：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> geoip2.database</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_address</span><span class="params">(ip)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    reader = geoip2.database.Reader(<span class="string">'./dbs/GeoLite2-City.mmdb'</span>) <span class="comment">#这里参数为刚才下载数据库的位置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    respone = reader.city(ip)   </span></pre></td></tr><tr><td class="code"><pre><span class="line">    Country = respone.country.name  <span class="comment">#获取国家</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Province = response.subdivisions.most_specific.name <span class="comment">#获取省</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    City = response.city.name  <span class="comment">#获取市</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    Longitude_And_Latitude = <span class="string">'Longitude:&#123;&#125;，Latitude：&#123;&#125;'</span>.format(response.location.longitude, response.location.latitude)  <span class="comment">#获取经纬度</span></span></pre></td></tr></table></figure>
<p>这样就可以获取到IP的所在位置了，这里返回的结果为英文，如果想要返回中文的话，选择地区即可，如获取国家的中文名称<code>response.country.names[&#39;zh-CN&#39;]</code>。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04-desktop-shell切换</title>
    <url>/2019/12/04/ubuntu16-04-desktop-shell%E5%88%87%E6%8D%A2/</url>
    <content><![CDATA[<p><code>Ubuntu</code>主要有<code>桌面版</code>和<code>Server版</code>两种，以前开发部署主要使用的是<code>Server版</code>，两种版本在外在最大的区别就是在与界面显示，<code>Server版</code>主要就是命令行显示，而桌面版更多版功能用界面的形式展现出来。<a id="more"></a>这次为了在Linux下练习使用<code>Docker</code>在本机上安装了一个<code>ubuntu-16.04.1-desktop-amd64</code>的桌面版的虚拟机 。但是在使用过程中发现做侧面的任务框没有了，右击鼠标也没有<code>Terminal</code>，本来想要卸载，但是想想辛辛苦苦装的，于是找找这台虚拟机其他利用价值，发现界面版还能切换至命令行版，所以果断切换。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/14106334-590439d6171532a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不显示侧面以及无法打开Terminal"></p>
<p>在桌面版中按<em>CTRL+ALT+F1</em>就可以切换至命令行模式，单这种情况下，图形界面GUI是在后台运行着，按<em>CTRL+ALT+F7</em>会切换回来。我们可以在系统引导启动时，按<em>CTRL+ALT+F7</em>这样就不会进入进入图形界面了。</p>
<p>桌面版默认没有安装ssh服务端，通过安装服务端可以使用<code>Xshell</code>进行连接，因为自带的命令行使用不习惯，可以执行以下步骤来安装：</p>
<ol>
<li><p><strong>安装ssh服务端</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span></pre></td></tr></table></figure></li>
<li><p><strong>确认ssh-server是否启动</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -e|grep ssh</span></pre></td></tr></table></figure>
<p>如果只有ssh-agent那ssh-server还没有启动，需要/etc/init.d/ssh start，如果看到sshd那说明ssh-server已经启动了</p>
</li>
<li><p><strong>启动ssh-server</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh start</span></pre></td></tr></table></figure></li>
<li><p><strong>SSH配置(若需要)</strong><br>修改配置文件/etc/ssh/sshd_config，这里可以定义SSH的服务端口，默认端口是22，你可以自己定义成其他端口号如32，然后重启服务</p>
</li>
<li><p><strong>重启ssh-server</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;etc&#x2F;init.d&#x2F;ssh restart</span></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>运维</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax中traditonal参数作用</title>
    <url>/2019/12/04/Ajax%E4%B8%ADtraditonal%E5%8F%82%E6%95%B0%E4%BD%9C%E7%94%A8/</url>
    <content><![CDATA[<p>在写Flask的时候遇到这样的问题，前端使用<code>Ajax</code>传递数据的时候，要不是数字类型，要不就是字符串，没有传递过数组(在<code>js</code>中的叫法，python中交列表，但是使用效果基本相同。)等复杂的数据类型。</p>
<a id="more"></a>
<p>这次场景中就遇到了这个问题，比如批量删除文章时，我需要传递多个文章的ID，需要一个数据类型包裹这些ID。前端知识不足的我，之前都是先存成一个数组，将这些ID <code>push</code>到数组中，然后再用某个特殊符号（我通常使用<code>,</code>）来<code>join</code>成字符串，传递给后端。这样就出现了好多麻烦的地方：</p>
<ul>
<li>前端代码过于冗杂</li>
<li>前后端需要商量拼接字符串,如我常用的<code>,</code>字符,还好前后端我都写，这个麻烦可能在我这不算问题</li>
<li>后端需要的过滤条件增多</li>
</ul>
<p>直到找到<code>Ajax</code>中的<code>traditional</code>参数，完全可以解决上面麻烦。</p>
<p>在<code>Ajax</code>的参数中<code>traditional</code>参数默认<code>false</code>,在这个状态下，data中的value数据类型只支持数字、字符串，如果设置为<code>true</code>就可以支持数字以及字典了，其中的关系到序列化的问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> $.ajax&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  url:<span class="string">"xxxx"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  traditional: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">  data:&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        p: values </span></pre></td></tr><tr><td class="code"><pre><span class="line">4  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>

<p>同时Flask也有函数专门接受数组数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">p = request.form.getlist(<span class="string">'p'</span>)  <span class="comment">#p就是传递的列表</span></span></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Ajax</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>Python生成词云</title>
    <url>/2019/12/04/Python%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/</url>
    <content><![CDATA[<p>词云，就是对网络文本中出现频率较高的“关键词”予以视觉上的突出，形成“关键词云层”或“关键词渲染”，从而过滤掉大量的文本信息，使浏览网页者只要一眼扫过文本就可以领略文本的主旨。</p>
<a id="more"></a>
<p>说实在的就是一张图片，包含各种词汇，而词汇的大小根据出现的出现的频率决定的。这张图就是我根据爬取微信公众号近3w篇文章的标题，进行分词后，生成的一张词云。<br><img src="https://upload-images.jianshu.io/upload_images/14106334-9e915149123cc511.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网络安全"><br>如果自己制作这张图感觉不从下手，但是有了Python在，简直分分钟的事。首先我们安装<code>wordcloud</code>这个生成词云的库，以及中文分词的库<code>jieba</code>，然后导入绘图的库<code>matplotlib</code></p>
<pre><code>pip install wordcloud
pip install jieba
pip install matplotlib</code></pre><p>然后代码说话：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image</span><span class="params">(top)</span>:</span>   <span class="comment">#词云中词汇个数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    articles = WechatArticle.query.with_entities(WechatArticle.title).all()   <span class="comment">#获取title数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    text = <span class="string">','</span>.join([i.title <span class="keyword">for</span> i <span class="keyword">in</span> articles])    <span class="comment">#进行数据拼接</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    result = jieba.analyse.textrank(text,topK=int(top),withWeight=<span class="literal">True</span>)   <span class="comment">#进行中文分词，并根据传入的词汇个数，产生多少个词汇，并返回各个词汇的比重。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    keywords = dict()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span></pre></td></tr><tr><td class="code"><pre><span class="line">        keywords[i[<span class="number">0</span>]] = i[<span class="number">1</span>]  <span class="comment">#生成字典，&#123;'keyword':weight&#125;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    wc = WordCloud(font_path=<span class="string">'./utils/captcha/simhei.ttf'</span>,max_words=int(top), width=<span class="number">805</span>, height=<span class="number">304</span>)  <span class="comment">#实例词云,传入字体路径，最大的词汇数，以及词云的宽高，这里的话如果不传入字体的话，找不到字体，就会出现框框的情况。</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    wc.generate_from_frequencies(keywords) <span class="comment">#传入关键字</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.imshow(wc) <span class="comment">#进行绘图</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    plt.axis(<span class="string">"off"</span>) <span class="comment">#去除X轴</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    wc.to_file(<span class="string">'./static/front/img/dream.png'</span>)  <span class="comment">#保存图片</span></span></pre></td></tr></table></figure>
<p>一番操作后，就能生成上面的词云了，其实在词云生成的样式也可以变化的，可以生成这样的也就需要加个中国地图的背景图片。<br><img src="https://upload-images.jianshu.io/upload_images/14106334-d7b23d70e09849ad.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有形状的词云"></p>
<p><strong>有需要，但是不懂的代码的小伙伴，可以私信我，免费帮忙哦，么么哒。</strong></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>词云</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask数据可视化</title>
    <url>/2019/12/03/Flask%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    <content><![CDATA[<p>在Web开发过程中遇到要做些数据可视化工作，对于我来说，基本上后端使用<a href="https://pyecharts.org/#/" target="_blank" rel="noopener">Pyecharts</a>配合着前端<code>echarts.js</code>实现数据可视化工作。</p>
<a id="more"></a>
<h3 id="Pyechats介绍"><a href="#Pyechats介绍" class="headerlink" title="Pyechats介绍"></a>Pyechats介绍</h3><p><strong>✨ 特性</strong></p>
<ul>
<li>简洁的 API 设计，使用如丝滑般流畅，支持链式调用</li>
<li>囊括了 30+ 种常见图表，应有尽有</li>
<li>支持主流 Notebook 环境，Jupyter Notebook 和 JupyterLab</li>
<li>可轻松集成至 Flask，Django 等主流 Web 框架</li>
<li>高度灵活的配置项，可轻松搭配出精美的图表</li>
<li>详细的文档和示例，帮助开发者更快的上手项目</li>
<li>多达 400+ 地图文件以及原生的百度地图，为地理数据可视化提供强有力的支持</li>
</ul>
<p><strong>版本</strong><br>Pyechats有两个大版本，分为<code>v0.5.X</code>和v1。这两个版本像<code>python2</code>和<code>python3</code>一样相互不兼容，而且v1版本使用了python3.6+更新新的语法特性，所以v1版本只支持python3.6+。</p>
<h3 id="Pyecharts使用"><a href="#Pyecharts使用" class="headerlink" title="Pyecharts使用"></a>Pyecharts使用</h3><p>在Web开发过程中，两个版本的Pyechats都使用过，使用的场景也不同。</p>
<h4 id="场景一：Top10柱状图展示"><a href="#场景一：Top10柱状图展示" class="headerlink" title="场景一：Top10柱状图展示"></a>场景一：Top10柱状图展示</h4><p>在一次爬虫数据展示中，爬取<a href="[http://www.shicimingju.com/](http://www.shicimingju.com/)">诗词名句网</a>中诗人作品，并将作品数量前十的诗人展示出来。那时，还是第一次使用pyechats，使用的是<code>0.5.1</code>版本，可以说，第一次接触可视化工具，对于前端知识不怎么了解的我，使用起来还是非常方便的。对于这个场景，通过导入相应的图表如使用如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Bar     柱状图</span></pre></td></tr><tr><td class="code"><pre><span class="line">Pie     饼状图</span></pre></td></tr><tr><td class="code"><pre><span class="line">Line    折线图</span></pre></td></tr></table></figure>
<p>主要使用这些图，还有其他图表如：<code>Funnel（漏斗图）</code>、<code>Gauge（仪表盘）</code>等等，如果有需要，详情请见<a href="https://05x-docs.pyecharts.org/#/zh-cn/charts_base" target="_blank" rel="noopener">Pyechats基本图表</a></p>
<ul>
<li>后端</li>
</ul>
<ol>
<li>导入柱状图表<code>Bar</code>类，以及页面<code>Page</code>类<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> Bar, Page</span></pre></td></tr></table></figure></li>
<li>定义一个函数，从数据库中查询数据，返回返回Bar的实例<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bar</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    poets = Poet.query.order_by(Poet.num.desc()).limit(<span class="number">10</span>)  <span class="comment">#获取诗人作品量前十的诗人</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    attr_poet = []    <span class="comment">#定义x轴数据，诗人姓名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    num_poet = []   <span class="comment">#定义y轴数据，诗人作品数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">for</span> poet <span class="keyword">in</span> poets:   </span></pre></td></tr><tr><td class="code"><pre><span class="line">        attr_poet.append(poet.name)   <span class="comment">#填充x轴数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        num_poet.append(poet.num)      <span class="comment">#填充y轴数据</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    bar = Bar(<span class="string">"作诗数前十名诗人"</span>)    <span class="comment">#实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    bar.add(<span class="string">""</span>, attr_poet, num_poet, is_label_show=<span class="literal">True</span>, center=[<span class="number">50</span>,<span class="number">50</span>])  <span class="comment">#将数据添加</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> bar   <span class="comment">#返回实例</span></span></pre></td></tr></table></figure></li>
<li>在视图中渲染给前端<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/search/')</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    page = Page()  <span class="comment">#创建一个页面实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    bar = get_bar()   <span class="comment">#执行函数，得到Bar实例</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    page.add(bar)   <span class="comment">#将图表添加带页面类中，如果页面中有多个图：page.add([bar1, bar2, ....])</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'search.html'</span>, chart=page.render_embed())  <span class="comment">#渲染页面,返回chart</span></span></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>前端</li>
</ul>
<ol>
<li>导入echarts.js<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='js/echarts.min.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure></li>
<li>在相应位置使用Jinja2语法引用chart<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#123;&#123; chart|safe &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure>
这样就实现数据展示，展示如下：<br><img src="https://upload-images.jianshu.io/upload_images/14106334-1e078578cbae62ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="作诗数前十诗人"><br>如果有兴趣研究项目地址如下：<a href="[https://github.com/Joynice/shicimingju](https://github.com/Joynice/shicimingju)">shicimingju</a></li>
</ol>
<h4 id="场景二：数据实时展示"><a href="#场景二：数据实时展示" class="headerlink" title="场景二：数据实时展示"></a>场景二：数据实时展示</h4><p>在近期的项目中，遇到了要实时更新的数据，类似实时展示24小时用户在线数量，这样的话每一个小时都要向后端请求一次数据，然后重新渲染图表，实现效果如下;<br><img src="https://upload-images.jianshu.io/upload_images/14106334-a74cd3546b8bc254.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="今日在线人数"><br>配合着<code>Layui</code>的轮播图展示，为了实现这个功能，我使用了<code>v1</code>的版本，这个相比于<code>0.5</code>版本，这个版本的实现效果更佳深入用户体验。实现这个功能使用Pyecharts也非常方便。</p>
<ul>
<li>后端<br>因为<code>v1</code>版本对代码进行了重构，所有导包方式也发生了变化</li>
</ul>
<ol>
<li>新版本的Pyecharts将图表封装到<code>pyecharts.charts</code>这个文件中,将配置封装到<code>options</code>文件中，将两者分开，所以导包时：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts <span class="keyword">import</span> options <span class="keyword">as</span> opts</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyecharts.charts <span class="keyword">import</span> Line</span></pre></td></tr></table></figure></li>
<li>与<code>0.5</code>版本类似，首先写个函数创建图表，由于还没正式上线，所以为假数据。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar_base</span><span class="params">()</span> -&gt; Line:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c = (</span></pre></td></tr><tr><td class="code"><pre><span class="line">        Line()</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .add_xaxis(xaxis_data=list(map(<span class="keyword">lambda</span> x: <span class="string">'&#123;&#125;:00'</span>.format(x), [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">25</span>)])))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .add_yaxis(<span class="string">"在线人数"</span>, [random.randint(<span class="number">25</span>, <span class="number">150</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">25</span>)], is_smooth=<span class="literal">True</span>, color=<span class="string">'#66CDAA'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                       label_opts=opts.LabelOpts(is_show=<span class="literal">False</span>))</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .set_series_opts(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            areastyle_opts=opts.AreaStyleOpts(opacity=<span class="number">0.5</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">            .set_global_opts(</span></pre></td></tr><tr><td class="code"><pre><span class="line">            title_opts=opts.TitleOpts(title=<span class="string">"今日在线人数"</span>, pos_left=<span class="string">'43%'</span>, pos_top=<span class="string">'8%'</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            xaxis_opts=opts.AxisOpts(</span></pre></td></tr><tr><td class="code"><pre><span class="line">                axistick_opts=opts.AxisTickOpts(is_align_with_label=<span class="literal">True</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">                is_scale=<span class="literal">False</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                boundary_gap=<span class="literal">False</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            ),</span></pre></td></tr><tr><td class="code"><pre><span class="line">            legend_opts=opts.LegendOpts(is_show=<span class="literal">False</span>),</span></pre></td></tr><tr><td class="code"><pre><span class="line">        )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    )</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> c</span></pre></td></tr></table></figure></li>
<li>定义一个视图函数进行，进行与前端交互<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@bp.route("/barChart")</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="meta">@login_required</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_bar_chart</span><span class="params">()</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    c = bar_base()</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> c.dump_options()</span></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li>前端</li>
</ul>
<ol>
<li><p>引用echarts.js</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"&#123;&#123; url_for('static', filename='common/echarts.min.js') &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></pre></td></tr></table></figure>
</li>
<li><p>结合<code>Layui</code>的轮播图，将生成的图表放入轮播图中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layui-carousel"</span> <span class="attr">id</span>=<span class="string">"test1"</span> <span class="attr">lay-filter</span>=<span class="string">"test1"</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">carousel-item</span>=<span class="string">""</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bar"</span> <span class="attr">style</span>=<span class="string">"background-image: url('&#123;&#123; static('admin/img/timg.gif') &#125;&#125;');"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                     <span class="tag">&lt;<span class="name">div</span>&gt;</span>条目2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                     <span class="tag">&lt;<span class="name">div</span>&gt;</span>条目3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                      <span class="tag">&lt;<span class="name">div</span>&gt;</span>条目4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">                      <span class="tag">&lt;<span class="name">div</span>&gt;</span>条目5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">               <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure></li>
<li><p>通过JS实现AJAX轮询操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">var</span> chart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'bar'</span>), <span class="string">'essos'</span>, &#123;<span class="attr">renderer</span>: <span class="string">'canvas'</span>&#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">      chart.resize();</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    chart.setOption(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">        toolbox: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            show: <span class="literal">true</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            feature: &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                mark: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                dataView: &#123;<span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">readOnly</span>: <span class="literal">false</span>&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                magicType: &#123;<span class="attr">show</span>: <span class="literal">true</span>, <span class="attr">type</span>: [<span class="string">'line'</span>, <span class="string">'bar'</span>, <span class="string">'stack'</span>, <span class="string">'tiled'</span>]&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                restore: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">                saveAsImage: &#123;<span class="attr">show</span>: <span class="literal">true</span>&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;,</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    $(</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            fetchData(chart);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            setInterval(fetchData, <span class="number">1000</span> * <span class="number">60</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">    );</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fetchData</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        $.ajax(&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">            type: <span class="string">"GET"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            url: <span class="string">"/barChart"</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            dataType: <span class="string">'json'</span>,</span></pre></td></tr><tr><td class="code"><pre><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">                chart.setOption(result);</span></pre></td></tr><tr><td class="code"><pre><span class="line">            &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">        &#125;);</span></pre></td></tr><tr><td class="code"><pre><span class="line">    &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure>
<p>这样就可以实现相应的功能了。</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在开发过程中，使用过多次<code>Pyecharts</code>，通过记录这两次场景应用，方便以后的学习，数据可视化还需要更深入的研究，以后还会继续学习相关知识。</p>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>Flask</tag>
        <tag>Echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>常规漏洞处置方案</title>
    <url>/2019/12/03/%E5%B8%B8%E8%A7%84%E6%BC%8F%E6%B4%9E%E5%A4%84%E7%BD%AE%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>收集下常规漏洞处置方案，在生产环境中，基本上首先都要封禁攻击者IP。</p>
<a id="more"></a>

<h3 id="内网IP攻击"><a href="#内网IP攻击" class="headerlink" title="内网IP攻击"></a>内网IP攻击</h3><p>升级免疫网络，基因式终端网卡绑定，对身份严格控制审计，对发出的任何数据做到严格验证封包。</p>
<h3 id="structs2远程命令执行漏洞"><a href="#structs2远程命令执行漏洞" class="headerlink" title="structs2远程命令执行漏洞"></a>structs2远程命令执行漏洞</h3><p>升级Struct2框架，在不影响业务前提下，对lib目录中对应jar包进行替换。</p>
<h3 id="注入攻击"><a href="#注入攻击" class="headerlink" title="注入攻击"></a>注入攻击</h3><p>封禁攻击IP，对用户输入进行验证，过滤特殊字符，使用类型安全的sql参数，业务代码中检测注入点。</p>
<h3 id="跨站攻击"><a href="#跨站攻击" class="headerlink" title="跨站攻击"></a>跨站攻击</h3><p>封禁攻击IP，对于存储型攻击，找到业务代码进行修复，过滤特殊字符串，严格检测用户输入，对用户上传文件进行检测。</p>
<h3 id="Web插件漏洞攻击"><a href="#Web插件漏洞攻击" class="headerlink" title="Web插件漏洞攻击"></a>Web插件漏洞攻击</h3><p>封禁攻击IP，对系统使用的Web插件进行定期插件检测，使用安全的Web插件，关注相关插件漏洞。</p>
<h3 id="Webshell攻击"><a href="#Webshell攻击" class="headerlink" title="Webshell攻击"></a>Webshell攻击</h3><p>封禁攻击IP，及时删除攻击文件，配置好服务器FSO权限，对asp上传文件进行严格审核，设置上传白名单。</p>
<h3 id="弱口令探测"><a href="#弱口令探测" class="headerlink" title="弱口令探测"></a>弱口令探测</h3><p>封禁探测IP，系统可以采取动态口令验证，定期更改口令，系统强制使用强口令。</p>
<h3 id="Web漏洞扫描"><a href="#Web漏洞扫描" class="headerlink" title="Web漏洞扫描"></a>Web漏洞扫描</h3><p>封禁攻击IP，使用第三方的防御策略来设置过滤。</p>
<h3 id="口令爆破"><a href="#口令爆破" class="headerlink" title="口令爆破"></a>口令爆破</h3><p>封禁探测IP，系统可以采取动态口令验证，定期更改口令，系统强制使用强口令。</p>
<h3 id="命令执行攻击"><a href="#命令执行攻击" class="headerlink" title="命令执行攻击"></a>命令执行攻击</h3><p>封禁攻击IP，对敏感字符进行转义，对参数进行过滤，系统少用或者禁用命令执行函数。</p>
<h3 id="Sql注入攻击"><a href="#Sql注入攻击" class="headerlink" title="Sql注入攻击"></a>Sql注入攻击</h3><p>封禁攻击IP，查询语句使用数据库提供的参数化查询接口，对特殊字符进行转义或者编码处理，严格限制变量类型、数据长度以及操作权限。</p>
<h3 id="社会工程学攻击"><a href="#社会工程学攻击" class="headerlink" title="社会工程学攻击"></a>社会工程学攻击</h3><p>保证数据库安全，防止被暴库泄露用户信息，重视邮件系统信息以及用户敏感信息保护。</p>
<h3 id="网络钓鱼攻击"><a href="#网络钓鱼攻击" class="headerlink" title="网络钓鱼攻击"></a>网络钓鱼攻击</h3><p>各类文章链接或文件一律不点击、不查看、不下载、不传播。</p>
<h3 id="Apache-Tomcat-远程代码执行攻击"><a href="#Apache-Tomcat-远程代码执行攻击" class="headerlink" title="Apache Tomcat 远程代码执行攻击"></a>Apache Tomcat 远程代码执行攻击</h3><p>封禁攻击IP，根据厂商进行升级补丁修复漏洞。</p>
<h3 id="RDP爆破攻击"><a href="#RDP爆破攻击" class="headerlink" title="RDP爆破攻击"></a>RDP爆破攻击</h3><p>封禁攻击IP，根据业务需求，关闭没必要RDP服务，更新RDP版本，系统账号设置强密码，限制密码尝试次数。</p>
<h3 id="挖矿木马攻击"><a href="#挖矿木马攻击" class="headerlink" title="挖矿木马攻击"></a>挖矿木马攻击</h3><p>封禁攻击IP，找到木马来源，切断入口；找到木马守护进程并杀死，然后杀死木马进程；持续监视服务器资源消耗，发现异常进程及时处置。</p>
<h3 id="勒索病毒"><a href="#勒索病毒" class="headerlink" title="勒索病毒"></a>勒索病毒</h3><p>1.断网处理，防止勒索病毒内网传播感染，造成更大的损失；</p>
<p>2.查找样本和勒索相关信息，确认是哪个勒索病毒家族的样本；</p>
<p>3.确认完勒索病毒家族之后，看看是否有相应的解密工具，可以进行解密；</p>
<p>4.进行溯源分析，确认是通过哪种方式传播感染的进来的，封堵相关的安全漏洞；</p>
<p>5.做好相应的安全防护工作，以防再次感染。</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>招聘网站信息收集</title>
    <url>/2019/12/03/%E6%8B%9B%E8%81%98%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<h2 id="FindJob"><a href="#FindJob" class="headerlink" title="FindJob"></a>FindJob</h2><p> 爬取各大招聘公司，将招聘信息保存到本地。</p>
<a id="more"></a>
<h3 id="招聘网站"><a href="#招聘网站" class="headerlink" title="招聘网站"></a>招聘网站</h3><ul>
<li><a href="https://www.zhipin.com/" target="_blank" rel="noopener">BOSS直聘</a></li>
<li><a href="https://www.51job.com/" target="_blank" rel="noopener">前程无忧51Job</a></li>
<li><a href="https://www.zhaopin.com/" target="_blank" rel="noopener">智联招聘</a></li>
<li><a href="https://www.lagou.com/" target="_blank" rel="noopener">拉钩网</a></li>
</ul>
<p><strong>持续更新</strong></p>
<h3 id="传入参数设计"><a href="#传入参数设计" class="headerlink" title="传入参数设计"></a>传入参数设计</h3><p>由于这些招聘网站设置的参数不同，统一到本项目中设置两个参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">city: 招聘地点</span></pre></td></tr><tr><td class="code"><pre><span class="line">keyword: 搜索关键字（如：java、python、平面设计等等）</span></pre></td></tr></table></figure>
<p>同时可以选择其中一个网站获取数据，也可以获得所有网站进行数据获取。</p>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><ul>
<li>core <pre><code>- boss.py         `boss直聘`
- QCWY.py       `前程无忧`
- zhilian.py        `智联招聘`</code></pre><ul>
<li>save-data     <code>存储数据</code></li>
<li>utils  <code>工具</code></li>
<li>config.py <code>配置</code></li>
<li>findjob.py <code>主文件</code></li>
</ul>
</li>
</ul>
<h4 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h4><p>以<code>前程无忧</code>进行代码分析，定义一个<code>QCWY</code>类，构造函数只要传入关键字、城市名称、线程数。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/14106334-9e9ae52db4571c78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="URL分析"><br>通过分析url， 获得相应的信息，这里城市的ID比较难构造，但是通过分析其他文件发现一个JS文件，保存着城市ID和城市之间的关系，通过分析JS文件，将输入的城市名称转换成相应的ID：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_city_code</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    url = <span class="string">'https://js.51jobcdn.com/in/js/2016/layer/area_array_c.js'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">    req = requests.get(url, headers=self.header).text</span></pre></td></tr><tr><td class="code"><pre><span class="line">    a = req.find(self.city)</span></pre></td></tr><tr><td class="code"><pre><span class="line">    <span class="keyword">return</span> req[a - <span class="number">9</span>:a - <span class="number">3</span>]</span></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/14106334-bd17de42e6679485.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="城市ID"></p>
<hr>
<p>同时获取搜索的页数，并构造相应URL<br><img src="https://upload-images.jianshu.io/upload_images/14106334-5c5647f0987300fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="获取最大页数"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_max_page</span><span class="params">(self)</span>:</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        city_code = self._get_city_code()</span></pre></td></tr><tr><td class="code"><pre><span class="line">        url = self.baseurl + <span class="string">'&#123;&#125;,000000,0000,00,9,99,&#123;&#125;,2,1.html'</span>.format(city_code, self.keyword)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        req = requests.get(url=url, headers=self.header)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        req.encoding = <span class="string">'gbk'</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">        html = etree.HTML(req.text)</span></pre></td></tr><tr><td class="code"><pre><span class="line">        max_page = html.xpath(<span class="string">'//*[@id="resultList"]/div[2]/div[5]/text()'</span>)[<span class="number">1</span>][<span class="number">3</span>:]</span></pre></td></tr><tr><td class="code"><pre><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>, int(max_page) + <span class="number">1</span>):</span></pre></td></tr><tr><td class="code"><pre><span class="line">            page_url = self.baseurl + <span class="string">'&#123;&#125;,000000,0000,00,9,99,&#123;&#125;,2,&#123;&#125;.html'</span>.format(city_code, self.keyword, page)</span></pre></td></tr><tr><td class="code"><pre><span class="line">            self.pagequeue.put(page_url)</span></pre></td></tr></table></figure>
<hr>
<p>进行上述获得城市ID，获得最大页码后，进行url构造后进行爬取，通过分析用Xpath就行获取相应的信息，获得如下信息</p>
<ol>
<li>职位名称</li>
<li>详细链接</li>
<li>公司名称</li>
<li>工作地点</li>
<li>薪资</li>
<li>发布时间</li>
<li>职位信息</li>
<li>公司信息</li>
</ol>
<p>获取这些字段，使用csv进行存储。</p>
<h4 id="存在问题"><a href="#存在问题" class="headerlink" title="存在问题"></a>存在问题</h4><ul>
<li>Boss直聘存在反爬，导致IP封禁。可以设置IP代理，最近得知正常Boss直聘增加了跳转，需要继续更新。</li>
<li>主文件中，多进程没有起作用，搜索之后，没有解决，请了解的小伙伴就行指教。</li>
</ul>
<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="[https://github.com/Joynice/FindJob](https://github.com/Joynice/FindJob)">FindJob</a><br>同时推荐给小伙伴我们团队的爬虫项目地址如下：<br><a href="https://github.com/DropsDevopsOrg/ECommerceCrawlers" target="_blank" rel="noopener">ECommerceCrawlers</a></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>百度关键词收录爬取</title>
    <url>/2019/12/03/%E7%99%BE%E5%BA%A6%E5%85%B3%E9%94%AE%E8%AF%8D%E6%94%B6%E5%BD%95%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<hr>
<p>title: 百度关键词收录爬取<br>date: 2019-12-03 20:35:03<br>tags:</p>
<ul>
<li>爬虫<br>categories:</li>
<li>爬虫</li>
</ul>
<p>根据百度搜索，输入关键字，获取相应关键子的收录数。</p>
<a id="more"></a>

<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol>
<li>根据百度搜索，输入关键词，获得相应关键词的收录数。</li>
<li>收集完数据后，根据指定的阈值进行数据分类（如大于收录数大于1000的保存在一个csv文件，其他保存在另一个csv文件中。）。</li>
<li>爬虫效率（目前测试实现18w/1h），带宽影响很大。</li>
<li>打包成exe，可执行文件。</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><strong>接口</strong>：<a href="http://www.baidu.com/s" target="_blank" rel="noopener">http://www.baidu.com/s</a> </p>
<p><strong>传参</strong>：data = {‘wd’: 关键词}</p>
<p>由于百度这个接口没有反爬设置，所有正确访问即可，通过Xpath+re获得想要的数据。</p>
<p>具体爬取内容如图所示：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/14106334-f9e08d54c97eafec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="爬取内容"></p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ol>
<li>先将需要爬取的txt文件复制到“彩票关键词”目录，保证目录中只存在需要爬取的文件。</li>
<li>再打开数据采集器，设置线程数，以及阈值。线程数建议20，根据带宽决定；阈值将数据进行划分出大于该值以及小于该值的两个文件。</li>
<li>最后从结果文件夹中提取出爬取结果。</li>
</ol>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://github.com/DropsDevopsOrg/ECommerceCrawlers/tree/master/OthertCrawler/0x10baidu" target="_blank" rel="noopener">项目地址</a></h2><p><a href="https://github.com/DropsDevopsOrg/ECommerceCrawlers/tree/master/OthertCrawler/0x10baidu" target="_blank" rel="noopener">https://github.com/DropsDevopsOrg/ECommerceCrawlers/tree/master/OthertCrawler/0x10baidu</a></p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol>
<li>学习TK。</li>
<li>异步</li>
<li>优化保存。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>高用代理</title>
    <url>/2019/12/03/%E9%AB%98%E7%94%A8%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>由于我们的代理有限，所以需要去一些代理网站上爬取一些可用的高效的代理，所以就需要爬虫去完成这部分的工作。</p>
<a id="more"></a>
<ol>
<li>爬虫部分  </li>
<li>代理检测  </li>
<li>存储</li>
</ol>
<h2 id="爬虫部分"><a href="#爬虫部分" class="headerlink" title="爬虫部分"></a>爬虫部分</h2><p>　　由于我们的代理有限，所以需要去一些代理网站上爬取一些可用的高效的代理，所以就需要爬虫去完成这部分的工作。</p>
<p>　　为了爬取高效的代理，找到以下的代理网站进行爬取：</p>
<ul>
<li><code>http://ip.kxdaili.com/</code></li>
<li><code>http://www.xicidaili.com/</code></li>
<li><code>http://www.66ip.cn/</code></li>
<li><code>http://www.66ip.cn/areaindex_%s/1.html</code></li>
<li><code>http://www.89ip.cn/</code></li>
</ul>
<p>　　首先，定义个爬虫类，我们只需传入爬取网站的url、正则表达式、以及标志符flag就可以调用get_data（）函数进行爬取，大大优化了代码结构，代码如下：  </p>
<pre><code>class Crawler(object):
    def __init__(self, url, regular, flag=None):
        self.url = url
        self.regular = regular
        self.flag = flag

    def get_data(self):
        proxies_list = []
        for i in self.url:
            print(i)
            try:
                text = requests.get(i, headers=config.HEADERS)
            except:
                pass
            time.sleep(5)
            text.encoding = &apos;utf-8&apos;
            data = re.findall(self.regular, text.text)
            if i[11:15] == &apos;66ip&apos;:
                for t in range(1, int(len(data) / self.flag)):
                    proxies = &apos;{}:{}&apos;.format(data[self.flag * t], data[(self.flag * t) + 1])
                    proxies_list.append(proxies)
            elif i[11:15] == &apos;89ip&apos;:
                proxies_list = data[1:]
            else:
                for t in range(0, int(len(data) / self.flag)):
                    proxies = &apos;{}:{}&apos;.format(data[self.flag * t], data[(self.flag * t) + 1])
                    proxies_list.append(proxies)
        return proxies_list</code></pre><p>　　代理列表如下：  </p>
<pre><code>SPIDER_PARSER_LIST =[
{    # 开心代理
    &apos;url&apos;:[&apos;http://ip.kxdaili.com/ipList/%s.html#ip&apos; % i for i in range(1, 11)],
    &apos;regular&apos;:&apos;&lt;td&gt;(.*?)&lt;/td&gt;&apos;,
    &apos;flag&apos;:7
},
{    # 西刺代理
    &apos;url&apos;:[&apos;http://www.xicidaili.com/nn/%s&apos; % i for i in range(1, 5)],
    &apos;regular&apos;:&apos;&lt;td&gt;(.*?)&lt;/td&gt;&apos;,
    &apos;flag&apos;:5
},
{    # 66ip代理-全国代理
    &apos;url&apos;: [&apos;http://www.66ip.cn/%s.html&apos; % i for i in range(1, 40)],
    &apos;regular&apos;: &apos;&lt;td&gt;(.*?)&lt;/td&gt;&apos;,
    &apos;flag&apos;:5
},
{    # 66ip代理-各省代理
    &apos;url&apos;: [&apos;http://www.66ip.cn/areaindex_%s/1.html&apos; % i for i in range(1, 35)],
    &apos;regular&apos;: &apos;&lt;td&gt;(.*?)&lt;/td&gt;&apos;,
    &apos;flag&apos;:5
},
{    # 根据api获得代理
    &apos;url&apos;: [&apos;http://www.89ip.cn/tqdl.html?api=1&amp;num={}&amp;port=&amp;address=&amp;isp=&apos;.format(500)],
    &apos;regular&apos;: &apos;(.*?)&lt;br&gt;&apos;,
    &apos;flag&apos;: None
},
]  </code></pre><p>　　调用方法如下：　　</p>
<pre><code>def get_object():
    proxise_list = []
    for pirder_paeser in config.SPIDER_PARSER_LIST:
        url = Crawler(url=pirder_paeser.get(&apos;url&apos;), regular=pirder_paeser.get(&apos;regular&apos;),
                      flag=pirder_paeser.get(&apos;flag&apos;)).get_data()
        proxise_list.append(url)
    return proxise_list</code></pre><h2 id="代理检测"><a href="#代理检测" class="headerlink" title="代理检测"></a>代理检测</h2><p>　　将存在列表里的代理组成一个新的列表，利用进程池进行快速地检测，检测主要如下：  </p>
<ol>
<li>代理是否可用，代理延迟大于3秒即视为不可用。  </li>
<li>http与https代理划分。  </li>
<li>高匿性检测（此部分完成的不好）。  </li>
</ol>
<p>　　由于自己的知识的欠缺，对于代理方面的知识了解不够全面，导致对于代理检测也是跟着自己的想法进行测试，不知道是否合理，请大家指出。代码如下：  </p>
<pre><code>def check(proxy):
    http_proxy_list = []
    http_proxy_gaoni_list = []
    https_proxy_list = []

    proxy_http_dict = {
        &apos;http&apos;: proxy
    }
    proxy_https_dict = {
        &apos;https&apos;: proxy
    }
    try:
        http_res = requests.get(config.SPIDER_PUBLIC_URL, proxies=proxy_http_dict, timeout=5,
                                headers=config.HEADERS)
        time.sleep(1)
        if http_res.status_code == 200:
            try:
                dic1 = eval(http_res.text)
                ip = dic1.get(&apos;remote_addr&apos;)
                if ip == public_network_ip:
                    http_proxy_list.append(proxy)
                    print(http_res.text)
                else:
                    print(http_res.text)
                    http_proxy_gaoni_list.append(proxy)
            except:
                pass
    except Exception as e:
        print(e)
    try:
        https_res = requests.get(&apos;https://www.baidu.com/&apos;, timeout=5, proxies=proxy_https_dict
                                 , headers=config.HEADERS, verify=False)
        time.sleep(1)
        if https_res.status_code == 200:
            print(&apos;https:&apos;)
            https_proxy_list.append(proxy)
    except Exception as e:
        print(e)
    print(http_proxy_list, http_proxy_gaoni_list, https_proxy_list)
    return http_proxy_list, http_proxy_gaoni_list, https_proxy_list</code></pre><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>　　利用python的flask-sqlalchemy模块进行关系到表的映射。Proxy结构如下：  </p>
<pre><code>class Proxy(db.Model):
    __tablename__ = &apos;proxy_pool&apos;
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    proxy = db.Column(db.String(100), nullable=False,unique=False)
    http = db.Column(db.String(100), nullable=False)
    type = db.Column(db.String(100), nullable=False)
    score = db.Column(db.Integer, nullable=False)
    add_time = db.Column(db.DateTime, nullable=False)
    check_time = db.Column(db.DateTime, nullable=False)
    res_time = db.Column(db.Float, nullable=False)</code></pre><p>　　存储是利用非orm结构进行存储，将检测的结果一次性存储，缩短了存储时间，减小了对数据库的压力。代码如下：  </p>
<pre><code>def save(proxy_list1, proxy_list2, proxy_list3):

    if len(proxy_list1) &gt; 0:
        session.execute(Proxy.__table__.insert(), [{&apos;proxy&apos;: str(i), &apos;http&apos;: &apos;http&apos;, &apos;type&apos;: &apos;透明&apos;, &apos;score&apos;: str(100)
                                                       , &apos;add_time&apos;: datetime.datetime.now(),
                                                    &apos;check_time&apos;: datetime.datetime.now()
                                                       , &apos;res_time&apos;: 0.1} for i in proxy_list1])
    else:
        pass
    if len(proxy_list2) &gt; 0:
        session.execute(Proxy.__table__.insert(), [
            {&apos;proxy&apos;: str(i), &apos;http&apos;: &apos;https&apos;, &apos;type&apos;: &apos;高匿&apos;, &apos;score&apos;: str(100), &apos;add_time&apos;: datetime.datetime.now(),
             &apos;check_time&apos;: datetime.datetime.now(), &apos;res_time&apos;: 0.1} for i in proxy_list2])
    else:
        pass
    if len(proxy_list3) &gt; 0:
        session.execute(Proxy.__table__.insert(), [
            {&apos;proxy&apos;: str(i), &apos;http&apos;: &apos;http&apos;, &apos;type&apos;: &apos;高匿&apos;, &apos;score&apos;: str(100), &apos;add_time&apos;: datetime.datetime.now(),
             &apos;check_time&apos;: datetime.datetime.now(), &apos;res_time&apos;: 0.1} for i in proxy_list3])
    else:
        pass
    session.commit()
    session.close()</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　第一次，合作完成项目，学习到了许多知识如：  </p>
<ol>
<li>利用类，充分利用代码，降低耦合度。</li>
<li>利用进程池缩短检测时间。</li>
<li>以及非orm存储数据库。  　　</li>
</ol>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>启发式爬虫</title>
    <url>/2019/12/03/%E5%90%AF%E5%8F%91%E5%BC%8F%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>简而言之启发式爬虫是基于所有历史经验及曾经看到过的已知场景，通过分析这些场景和利用已知的经验构造并实现规则的爬虫。</p>
<a id="more"></a>


<ol>
<li>什么是启发式爬虫？</li>
<li>启发式爬虫好处</li>
<li>启发式爬虫具体实现</li>
</ol>
<h2 id="什么是启发式爬虫？"><a href="#什么是启发式爬虫？" class="headerlink" title="什么是启发式爬虫？"></a>什么是启发式爬虫？</h2><p>　　简而言之启发式爬虫是基于所有历史经验及曾经看到过的已知场景，通过分析这些场景和利用已知的经验构造并实现规则的爬虫。</p>
<h2 id="启发式爬虫好处"><a href="#启发式爬虫好处" class="headerlink" title="启发式爬虫好处"></a>启发式爬虫好处</h2><p>现今网站特征：　　　　</p>
<pre><code>1. Vue.js
2. JQuery
3. Handlebars
4. 代码混淆反爬虫
5. DOM时间频繁更新　　　　</code></pre><p>　　这些网站特征导致requests、urllib这些传统爬虫所用到的模块爬取不到有用的信息。这样，基于无界面的浏览器横空出世。 </p>
<p>　　无界面浏览器发展到现在，Chromium Headless可以说是众多浏览器中的佼佼者，一方面它是谷歌研发市场第一，几个小时一个版本更新，另一方面，Chromium Headless积极支持W3C标志组织。这些优势，势必会成为将来爬虫和自动化测试的利器。    </p>
<p>　　既然已经拥有了这么强大的无界面浏览器，就要用强大的工具去操纵它，puppteer翻译是操纵木偶的人，利用这个工具，我们能做到一个操纵页面的人。puppteer是一个Node.js的库，支持调用Chrome的Api来操纵web，相比较Selenium或是PhantomJs，它最大的特点就是它的操作Dom可以完成在内存中进行模拟既在V8引擎中处理而不打开浏览器，而且关键是这个是Chrome团队在维护，会拥有更好的兼容性和前景。   </p>
<p>　　Pyppteer是python中操作Chromium Headless的库，具有个puppteer一样的功能，如以下功能：    </p>
<pre><code>1. 利用网页生成PDF、图片
2. 爬取SPA应用，并生成预渲染内容（即“SSR” 服务端渲染）
3. 可以从网站抓取内容
4. 自动化表单提交、UI测试、键盘输入等
5. 帮你创建一个最新的自动化测试环境（chrome），可以直接在此运行测试用例
6. 捕获站点的时间线，以便追踪你的网站，帮助分析网站性能问题</code></pre><h2 id="启发式爬虫具体实现"><a href="#启发式爬虫具体实现" class="headerlink" title="启发式爬虫具体实现"></a>启发式爬虫具体实现</h2><p>　　首先可以把爬虫看作一个工厂流水线系统，流水线系统一定会有一个总队长负责各条生产线任务调度，在这里<font color=red size=2 face="Consolas">ROP</font>就是总队长。流程明确后，每个步骤都各司其职实现各自的功能。　　　　</p>
<p>　　爬虫总队长这个管理器的功能负责任务调度和事件管理。在做扫描器爬虫的第一步先将URL传给任务调度器总队长，总队长把这个任务传给下面，之后打开页面进入到加载状态。页面加载后需要判断当前页面是否完全，比如有时候某些网页服务器网络性差，或是遇到GS报错、网站超时某些资源显示不全，这时候可以通过下图标注的三个状态来确定整个网页的结构是否加载完成，整个页面是否打开完成。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/14106334-07cca1feae006adf?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启发式爬虫具体实现"></p>
<p>　　完成后把整个浏览器page页面锁定不做任何动作，让它打开另外一个新网页，或者跳转其他网页上去。</p>
<p>　　当整个网页加载好之后，把整个网页跳转锁定后就可以进入到函数劫持阶段。随后开始注入一个监听器，监听所有事件的变动和事件触发的信息。当文件加载、函数劫持、监听都完成之后，可以编译出任何输入框绑定的事件，对某个输入参数值进行常规判断的一些信息。</p>
<p>　　当我们发现页面存在表单的时候，可以通过分析表单的输入类型以及表单名称，进行一些参数填充。上面所有流程结束后，会得到当前页面所有信息的结果题。此时可以通过去虫过滤之后，返回给事件管理器，重复执行整个流程。</p>
<p>　　确定总体流程之后回到刚才的第一步，页面加载，录入实现。</p>
<p>　　当一个页面加载完成之后，应该在什么时候注入我们的劫持代码，这里边有状态可以选择。第一个在page load之后；第二个是等待页面加载完成之后，也就是当前网络状态全部空闲的时候，整个爬虫执行流再继续执行；或者判断整个网页的DOM树是否被加载并解析完成。</p>
<h3 id="演示实例"><a href="#演示实例" class="headerlink" title="演示实例"></a>演示实例</h3><p>Example: open web page and take a screenshot.</p>
<pre><code>import asyncio
from pyppeteer import launch

async def main():
    browser = await launch()
    page = await browser.newPage()
    await page.goto(&apos;http://example.com&apos;)
    await page.screenshot({&apos;path&apos;: &apos;example.png&apos;})
    await browser.close()

asyncio.get_event_loop().run_until_complete(main())</code></pre><p>Example: evaluate script on the page.</p>
<pre><code>import asyncio
from pyppeteer import launch

async def main():
    browser = await launch()
    page = await browser.newPage()
    await page.goto(&apos;http://example.com&apos;)
    await page.screenshot({&apos;path&apos;: &apos;example.png&apos;})

    dimensions = await page.evaluate(&apos;&apos;&apos;() =&gt; {
        return {
            width: document.documentElement.clientWidth,
            height: document.documentElement.clientHeight,
            deviceScaleFactor: window.devicePixelRatio,
        }
    }&apos;&apos;&apos;)

    print(dimensions)
    # &gt;&gt;&gt; {&apos;width&apos;: 800, &apos;height&apos;: 600, &apos;deviceScaleFactor&apos;: 1}
    await browser.close()

asyncio.get_event_loop().run_until_complete(main())</code></pre>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>Pyppteer</tag>
      </tags>
  </entry>
</search>
